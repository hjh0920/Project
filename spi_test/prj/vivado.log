#-----------------------------------------------------------
# Vivado v2019.1 (64-bit)
# SW Build 2552052 on Fri May 24 14:49:42 MDT 2019
# IP Build 2548770 on Fri May 24 18:01:18 MDT 2019
# Start of session at: Fri Jun  2 22:55:52 2023
# Process ID: 4636
# Current directory: C:/Users/hjh09/Desktop/project/spi_test/prj
# Command line: vivado.exe -gui_launcher_event rodinguilauncherevent6372 C:\Users\hjh09\Desktop\project\spi_test\prj\top.xpr
# Log file: C:/Users/hjh09/Desktop/project/spi_test/prj/vivado.log
# Journal file: C:/Users/hjh09/Desktop/project/spi_test/prj\vivado.jou
#-----------------------------------------------------------
start_gui
open_project C:/Users/hjh09/Desktop/project/spi_test/prj/top.xpr
Scanning sources...
Finished scanning sources
INFO: [IP_Flow 19-234] Refreshing IP repositories
INFO: [IP_Flow 19-1704] No user IP repositories specified
INFO: [IP_Flow 19-2313] Loaded Vivado IP repository 'C:/Software/Xilinx/Vivado/2019.1/data/ip'.
update_compile_order -fileset sources_1
set addr 8
8
set address [format "0x%08X" $addr]
0x00000008
open_hw
connect_hw_server
INFO: [Labtools 27-2285] Connecting to hw_server url TCP:localhost:3121
INFO: [Labtools 27-2222] Launching hw_server...
INFO: [Labtools 27-2221] Launch Output:

****** Xilinx hw_server v2019.1
  **** Build date : May 24 2019 at 15:13:31
    ** Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.


open_hw_target
INFO: [Labtoolstcl 44-466] Opening hw_target localhost:3121/xilinx_tcf/Digilent/210512180081
set_property PROGRAM.FILE {C:/Users/hjh09/Desktop/project/spi_test/prj/top.runs/impl_1/top.bit} [get_hw_devices xc7a35t_0]
set_property PROBES.FILE {C:/Users/hjh09/Desktop/project/spi_test/prj/top.runs/impl_1/top.ltx} [get_hw_devices xc7a35t_0]
set_property FULL_PROBES.FILE {C:/Users/hjh09/Desktop/project/spi_test/prj/top.runs/impl_1/top.ltx} [get_hw_devices xc7a35t_0]
current_hw_device [get_hw_devices xc7a35t_0]
refresh_hw_device [lindex [get_hw_devices xc7a35t_0] 0]
INFO: [Labtools 27-1435] Device xc7a35t (JTAG device index = 0) is not programmed (DONE status = 0).
set_property PROBES.FILE {C:/Users/hjh09/Desktop/project/spi_test/prj/top.runs/impl_1/top.ltx} [get_hw_devices xc7a35t_0]
set_property FULL_PROBES.FILE {C:/Users/hjh09/Desktop/project/spi_test/prj/top.runs/impl_1/top.ltx} [get_hw_devices xc7a35t_0]
set_property PROGRAM.FILE {C:/Users/hjh09/Desktop/project/spi_test/prj/top.runs/impl_1/top.bit} [get_hw_devices xc7a35t_0]
program_hw_devices [get_hw_devices xc7a35t_0]
INFO: [Labtools 27-3164] End of startup status: HIGH
refresh_hw_device [lindex [get_hw_devices xc7a35t_0] 0]
INFO: [Labtools 27-2302] Device xc7a35t (JTAG device index = 0) is programmed with a design that has 1 JTAG AXI core(s).
source C:/Users/hjh09/Desktop/project/spi_test/tcl/axi_jtag.tcl
# proc ReadReg {address} {
#     set address [format 0x%08x $address]
#     create_hw_axi_txn rd_txn [get_hw_axis hw_axi_1] -address $address -type read
#     run_hw_axi rd_txn
#     set read_value [lindex [report_hw_axi_txn rd_txn] 1]
#     delete_hw_axi_txn rd_txn
#     return $read_value
# }
# proc WriteReg {address data} {
#     set address [format 0x%08x $address]
#     set data [format 0x%08x $data]
#     create_hw_axi_txn wr_txn [get_hw_axis hw_axi_1] -type write -address $address -data $data
#     run_hw_axi wr_txn
#     set write_value [lindex [report_hw_axi_txn wr_txn] 1]
#     delete_hw_axi_txn wr_txn
#     return $write_value
# }
ReadReg 0x68
INFO: [Labtoolstcl 44-481] READ DATA is: 00000000
00000000
ReadReg 0x60
INFO: [Labtoolstcl 44-481] READ DATA is: 00000180
00000180
source C:/Users/hjh09/Desktop/project/spi_test/tcl/flash_test.tcl
# proc RDID {byte_num} {
#     set num 0
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 9F, ËØ? FLASH ID
#     WriteReg 0x68 0x9f
#     # Ë¶ÅË?ªÂ°ËöÂ∞ë‰∏?Êï∞ÊçÆÂ∞±ÂÜôÂá†‰∏™ dummy Êï∞ÊçÆ
#     while {$num < $byte_num} {
#         WriteReg 0x68 0x00
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# 
#     set num 0
#     set id_data "RDID is "
#     while {$num < $byte_num + 1} {
#         if {$num > 0} {
#             append id_data [format %02x [ReadReg 0x6c 0x00]]
#         }
#         incr num 1
#     }
#     return $id_data
# }
puts $id_data
can't read "id_data": no such variable
RDID 3
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x000001e6
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000186
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x0000009f
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000000
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000000
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000000
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000000
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000086
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000001
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000186
wrong # args: should be "ReadReg address"
source C:/Users/hjh09/Desktop/project/spi_test/tcl/flash_test.tcl
# proc RDID {byte_num} {
#     set num 0
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 9F, ËØ? FLASH ID
#     WriteReg 0x68 0x9f
#     # Ë¶ÅË?ªÂ°ËöÂ∞ë‰∏?Êï∞ÊçÆÂ∞±ÂÜôÂá†‰∏™ dummy Êï∞ÊçÆ
#     while {$num < $byte_num} {
#         WriteReg 0x68 0x00
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# 
#     set num 0
#     set id_data "RDID is "
#     while {$num < $byte_num + 1} {
#         if {$num > 0} {
#             append id_data [format %02x [ReadReg 0x6c]]
#         }
#         incr num 1
#     }
#     return $id_data
# }
RDID 3
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x000001e6
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000186
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x0000009f
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000000
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000000
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000000
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000000
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000086
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000001
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000186
INFO: [Labtoolstcl 44-481] READ DATA is: 000000ff
expected integer but got "000000ff"
source C:/Users/hjh09/Desktop/project/spi_test/tcl/flash_test.tcl
# proc RDID {byte_num} {
#     set num 0
#     WriteReg 0x40 0xa
#     WriteReg 0x28 0x3fff
#     WriteReg 0x1c 0x80000000
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 9F, ËØ? FLASH ID
#     WriteReg 0x68 0x9f
#     # Ë¶ÅË?ªÂ°ËöÂ∞ë‰∏?Êï∞ÊçÆÂ∞±ÂÜôÂá†‰∏™ dummy Êï∞ÊçÆ
#     while {$num < $byte_num} {
#         WriteReg 0x68 0x00
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# 
#     set num 0
#     set id_data "RDID is "
#     while {$num < $byte_num + 1} {
#         if {$num > 0} {
#             append id_data [format %02x [ReadReg 0x6c]]
#         }
#         incr num 1
#     }
#     return $id_data
# }
RDID 3
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x0000000a
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00003fff
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x80000000
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x000001e6
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000186
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x0000009f
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000000
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000000
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000000
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000000
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000086
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000001
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000186
INFO: [Labtoolstcl 44-481] READ DATA is: 000000ff
expected integer but got "000000ff"
ReadReg 0x6c
INFO: [Labtoolstcl 44-481] READ DATA is: 00000020
00000020
expr {0xFF & [ReadReg 0x6c]}
INFO: [Labtoolstcl 44-481] READ DATA is: 000000ba
can't use non-numeric string as operand of "&"
source C:/Users/hjh09/Desktop/project/spi_test/tcl/flash_test.tcl
# proc RDID {byte_num} {
#     set num 0
#     WriteReg 0x40 0xa
#     WriteReg 0x28 0x3fff
#     WriteReg 0x1c 0x80000000
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 9F, ËØ? FLASH ID
#     WriteReg 0x68 0x9f
#     # Ë¶ÅË?ªÂ°ËöÂ∞ë‰∏?Êï∞ÊçÆÂ∞±ÂÜôÂá†‰∏™ dummy Êï∞ÊçÆ
#     while {$num < $byte_num} {
#         WriteReg 0x68 0x00
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# 
#     set num 0
#     set id_data "RDID is "
#     while {$num < $byte_num + 1} {
#         if {$num > 0} {
#             append id_data [ReadReg 0x6c]
#         }
#         incr num 1
#     }
#     return $id_data
# }
RDID 3
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x0000000a
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00003fff
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x80000000
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x000001e6
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000186
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x0000009f
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000000
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000000
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000000
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000000
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000086
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000001
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000186
INFO: [Labtoolstcl 44-481] READ DATA is: 000000ff
INFO: [Labtoolstcl 44-481] READ DATA is: 00000020
INFO: [Labtoolstcl 44-481] READ DATA is: 000000ba
RDID is 000000ff00000020000000ba
source C:/Users/hjh09/Desktop/project/spi_test/tcl/flash_test.tcl
# proc RDID {byte_num} {
#     set num 0
#     WriteReg 0x40 0xa
#     WriteReg 0x28 0x3fff
#     WriteReg 0x1c 0x80000000
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 9F, ËØ? FLASH ID
#     WriteReg 0x68 0x9f
#     # Ë¶ÅË?ªÂ°ËöÂ∞ë‰∏?Êï∞ÊçÆÂ∞±ÂÜôÂá†‰∏™ dummy Êï∞ÊçÆ
#     while {$num < $byte_num} {
#         WriteReg 0x68 0x00
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# 
#     set num 0
#     set id_data "RDID is "
#     while {$num < $byte_num + 1} {
#         if {$num > 0} {
#             append id_data [ReadReg 0x6c]
#             puts $id_data
#         }
#         incr num 1
#     }
#     return $id_data
# }
RDID 3
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x0000000a
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00003fff
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x80000000
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x000001e6
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000186
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x0000009f
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000000
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000000
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000000
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000000
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000086
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000001
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000186
INFO: [Labtoolstcl 44-481] READ DATA is: 000000ff
RDID is 000000ff
INFO: [Labtoolstcl 44-481] READ DATA is: 00000020
RDID is 000000ff00000020
INFO: [Labtoolstcl 44-481] READ DATA is: 000000ba
RDID is 000000ff00000020000000ba
RDID is 000000ff00000020000000ba
source C:/Users/hjh09/Desktop/project/spi_test/tcl/flash_test.tcl
# proc RDID {byte_num} {
#     set num 0
#     WriteReg 0x40 0xa
#     WriteReg 0x28 0x3fff
#     WriteReg 0x1c 0x80000000
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 9F, ËØ? FLASH ID
#     WriteReg 0x68 0x9f
#     # Ë¶ÅË?ªÂ°ËöÂ∞ë‰∏?Êï∞ÊçÆÂ∞±ÂÜôÂá†‰∏™ dummy Êï∞ÊçÆ
#     while {$num < $byte_num} {
#         WriteReg 0x68 0x00
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# 
#     set num 0
#     set id_data "RDID is "
#     while {$num < $byte_num + 1} {
#         puts $num
#         if {$num > 0} {
#             append id_data [ReadReg 0x6c]
#             puts $id_data
#         }
#         incr num 1
#     }
#     return $id_data
# }
RDID 3
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x0000000a
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00003fff
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x80000000
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x000001e6
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000186
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x0000009f
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000000
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000000
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000000
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000000
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000086
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000001
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000186
0
1
INFO: [Labtoolstcl 44-481] READ DATA is: 000000ff
RDID is 000000ff
2
INFO: [Labtoolstcl 44-481] READ DATA is: 00000020
RDID is 000000ff00000020
3
INFO: [Labtoolstcl 44-481] READ DATA is: 000000ba
RDID is 000000ff00000020000000ba
RDID is 000000ff00000020000000ba
source C:/Users/hjh09/Desktop/project/spi_test/tcl/flash_test.tcl
# proc RDID {byte_num} {
#     set num 0
#     WriteReg 0x40 0xa
#     WriteReg 0x28 0x3fff
#     WriteReg 0x1c 0x80000000
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 9F, ËØ? FLASH ID
#     WriteReg 0x68 0x9f
#     # Ë¶ÅË?ªÂ°ËöÂ∞ë‰∏?Êï∞ÊçÆÂ∞±ÂÜôÂá†‰∏™ dummy Êï∞ÊçÆ
#     while {$num < $byte_num} {
#         WriteReg 0x68 0x00
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# 
#     set num 0
#     set id_data "RDID is "
#     while {[ReadReg 0x78] /= 0} {}
#     while {$num < $byte_num + 1} {
#         puts $num
#         if {$num > 0} {
#             append id_data [ReadReg 0x6c]
#             puts $id_data
#         }
#         incr num 1
#     }
#     return $id_data
# }
RDID 3
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x0000000a
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00003fff
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x80000000
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x000001e6
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000186
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x0000009f
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000000
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000000
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000000
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000000
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000086
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000001
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000186
INFO: [Common 17-14] Message 'Labtoolstcl 44-481' appears 100 times and further instances of the messages will be disabled. Use the Tcl command set_msg_config to change the current settings.
incomplete operator "="
in expression "[ReadReg 0x78] /= 0"
source C:/Users/hjh09/Desktop/project/spi_test/tcl/flash_test.tcl
# proc RDID {byte_num} {
#     set num 0
#     WriteReg 0x40 0xa
#     WriteReg 0x28 0x3fff
#     WriteReg 0x1c 0x80000000
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 9F, ËØ? FLASH ID
#     WriteReg 0x68 0x9f
#     # Ë¶ÅË?ªÂ°ËöÂ∞ë‰∏?Êï∞ÊçÆÂ∞±ÂÜôÂá†‰∏™ dummy Êï∞ÊçÆ
#     while {$num < $byte_num} {
#         WriteReg 0x68 0x00
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# 
#     set num 0
#     set id_data "RDID is "
#     while {[ReadReg 0x78] != 0} {}
#     while {$num < $byte_num + 1} {
#         puts $num
#         if {$num > 0} {
#             append id_data [ReadReg 0x6c]
#             puts $id_data
#         }
#         incr num 1
#     }
#     return $id_data
# }
RDID 3
INFO: [Common 17-41] Interrupt caught. Command should exit soon.
INFO: [Common 17-344] 'run_hw_axi' was cancelled
ReadReg 0x78
ERROR: [Labtools 27-1991] Can not create a second hw_axi_txn object with the same name [rd_txn].  Use the -force option to override this error check.
delete_hw_axi_txn rd_txn
ReadReg 0x78
00000003
source C:/Users/hjh09/Desktop/project/spi_test/tcl/flash_test.tcl
# proc RDID {byte_num} {
#     set num 0
#     WriteReg 0x40 0xa
#     WriteReg 0x28 0x3fff
#     WriteReg 0x1c 0x80000000
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 9F, ËØ? FLASH ID
#     WriteReg 0x68 0x9f
#     # Ë¶ÅË?ªÂ°ËöÂ∞ë‰∏?Êï∞ÊçÆÂ∞±ÂÜôÂá†‰∏™ dummy Êï∞ÊçÆ
#     while {$num < $byte_num} {
#         WriteReg 0x68 0x00
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# 
#     set num 0
#     set id_data "RDID is "
#     while {[ReadReg 0x78] == 0x00000000} {}
#     while {$num < $byte_num + 1} {
#         puts $num
#         if {$num > 0} {
#             append id_data [ReadReg 0x6c]
#             puts $id_data
#         }
#         incr num 1
#     }
#     return $id_data
# }
RDID 3
0
1
RDID is 000000ff
2
RDID is 000000ff00000020
3
RDID is 000000ff00000020000000ba
RDID is 000000ff00000020000000ba
ReadReg 0x78
00000000
ReadReg 0x6c
00000018
source C:/Users/hjh09/Desktop/project/spi_test/tcl/flash_test.tcl
# proc RDID {byte_num} {
#     set num 0
#     WriteReg 0x40 0xa
#     WriteReg 0x28 0x3fff
#     WriteReg 0x1c 0x80000000
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 9F, ËØ? FLASH ID
#     WriteReg 0x68 0x9f
#     # Ë¶ÅË?ªÂ°ËöÂ∞ë‰∏?Êï∞ÊçÆÂ∞±ÂÜôÂá†‰∏™ dummy Êï∞ÊçÆ
#     while {$num < $byte_num} {
#         WriteReg 0x68 0x00
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# 
#     set num 0
#     set id_data "RDID is "
#     while {[ReadReg 0x78] == 0x00000000} {}
#     while {$num < $byte_num + 2} {
#         puts $num
#         if {$num > 1} {
#             append id_data [ReadReg 0x6c]
#             puts $id_data
#         }
#         incr num 1
#     }
#     return $id_data
# }
RDID 3
0
1
2
RDID is 000000ff
3
RDID is 000000ff00000020
4
RDID is 000000ff00000020000000ba
RDID is 000000ff00000020000000ba
source C:/Users/hjh09/Desktop/project/spi_test/tcl/flash_test.tcl
# proc RDID {byte_num} {
#     set num 0
#     WriteReg 0x40 0xa
#     WriteReg 0x28 0x3fff
#     WriteReg 0x1c 0x80000000
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 9F, ËØ? FLASH ID
#     WriteReg 0x68 0x9f
#     # Ë¶ÅË?ªÂ°ËöÂ∞ë‰∏?Êï∞ÊçÆÂ∞±ÂÜôÂá†‰∏™ dummy Êï∞ÊçÆ
#     while {$num < $byte_num} {
#         WriteReg 0x68 0x00
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# 
#     set num 0
#     set id_data "RDID is "
#     while {[ReadReg 0x78] != 0x00000003} {}
#     while {$num < $byte_num + 2} {
#         puts $num
#         if {$num > 1} {
#             append id_data [ReadReg 0x6c]
#             puts $id_data
#         }
#         incr num 1
#     }
#     return $id_data
# }
RDID 3
0
1
2
RDID is 000000ff
3
RDID is 000000ff00000020
4
RDID is 000000ff00000020000000ba
RDID is 000000ff00000020000000ba
source C:/Users/hjh09/Desktop/project/spi_test/tcl/flash_test.tcl
# proc RDID {byte_num} {
#     set num 0
#     WriteReg 0x40 0xa
#     WriteReg 0x28 0x3fff
#     WriteReg 0x1c 0x80000000
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 9F, ËØ? FLASH ID
#     WriteReg 0x68 0x9f
#     # Ë¶ÅË?ªÂ°ËöÂ∞ë‰∏?Êï∞ÊçÆÂ∞±ÂÜôÂá†‰∏™ dummy Êï∞ÊçÆ
#     while {$num < $byte_num} {
#         WriteReg 0x68 0x00
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# 
#     set num 0
#     set id_data "RDID is "
#     while {$num < $byte_num + 3} {
#         puts $num
#         if {$num > 2} {
#             append id_data [ReadReg 0x6c]
#             puts $id_data
#         }
#         incr num 1
#     }
#     return $id_data
# }
RDID 3
0
1
2
3
RDID is 000000ff
4
RDID is 000000ff00000020
5
RDID is 000000ff00000020000000ba
RDID is 000000ff00000020000000ba
source C:/Users/hjh09/Desktop/project/spi_test/tcl/flash_test.tcl
# proc RDID {byte_num} {
#     set num 0
#     WriteReg 0x40 0xa
#     WriteReg 0x28 0x3fff
#     WriteReg 0x1c 0x80000000
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 9F, ËØ? FLASH ID
#     WriteReg 0x68 0x9f
#     # Ë¶ÅË?ªÂ°ËöÂ∞ë‰∏?Êï∞ÊçÆÂ∞±ÂÜôÂá†‰∏™ dummy Êï∞ÊçÆ
#     while {$num < $byte_num} {
#         WriteReg 0x68 0x00
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# 
#     set num 0
#     set id_data "RDID is "
#     while {$num < $byte_num + 11} {
#         puts $num
#         if {$num > 10} {
#             append id_data [ReadReg 0x6c]
#             puts $id_data
#         }
#         incr num 1
#     }
#     return $id_data
# }
RDID 3
0
1
2
3
4
5
6
7
8
9
10
11
RDID is 000000ff
12
RDID is 000000ff00000020
13
RDID is 000000ff00000020000000ba
RDID is 000000ff00000020000000ba
source C:/Users/hjh09/Desktop/project/spi_test/tcl/flash_test.tcl
# proc RDID {byte_num} {
#     set num 0
#     WriteReg 0x40 0xa
#     WriteReg 0x28 0x3fff
#     WriteReg 0x1c 0x80000000
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 9F, ËØ? FLASH ID
#     WriteReg 0x68 0x9f
#     # Ë¶ÅË?ªÂ°ËöÂ∞ë‰∏?Êï∞ÊçÆÂ∞±ÂÜôÂá†‰∏™ dummy Êï∞ÊçÆ
#     while {$num < $byte_num} {
#         WriteReg 0x68 0x00
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# 
#     set num 0
#     set id_data "RDID is "
#     while {$num < $byte_num + 1} {
#         puts $num
#         if {$num >= 1} {
#             append id_data [ReadReg 0x6c]
#             puts $id_data
#         } else {
#             ReadReg 0x6c
#         }
#         incr num 1
#     }
#     return $id_data
# }
RDID 3
0
1
RDID is 00000020
2
RDID is 00000020000000ba
3
RDID is 00000020000000ba00000018
RDID is 00000020000000ba00000018
ReadReg 0x78
00000000
ReadReg 0x6c
00000018
ReadReg 0x6c
00000018
ReadReg 0x6c
00000018
expr {int(ReadReg 0x6c)}
invalid bareword "ReadReg"
in expression "int(ReadReg 0x6c)";
should be "$ReadReg" or "{ReadReg}" or "ReadReg(...)" or ...
expr {int[ReadReg 0x6c]}
invalid bareword "int"
in expression "int[ReadReg 0x6c]";
should be "$int" or "{int}" or "int(...)" or ...
expr {[ReadReg 0x6c]}
00000018
expr {0xff & [ReadReg 0x6c]}
can't use invalid octal number as operand of "&"
int([ReadReg 0x6c])
invalid command name "int(00000018)"
expr {int([ReadReg 0x6c])}
expected number but got "00000018" (looks like invalid octal number)
string index [ReadReg 0x6c] -1
string length [ReadReg 0x6c]
8
string index [ReadReg 0x6c] end-1
1
string index [ReadReg 0x6c] end
8
string range [ReadReg 0x6c] end-1 end
18
source C:/Users/hjh09/Desktop/project/spi_test/tcl/flash_test.tcl
# proc RDID {byte_num} {
#     set num 0
#     WriteReg 0x40 0xa
#     WriteReg 0x28 0x3fff
#     WriteReg 0x1c 0x80000000
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 9F, ËØ? FLASH ID
#     WriteReg 0x68 0x9f
#     # Ë¶ÅË?ªÂ°ËöÂ∞ë‰∏?Êï∞ÊçÆÂ∞±ÂÜôÂá†‰∏™ dummy Êï∞ÊçÆ
#     while {$num < $byte_num} {
#         WriteReg 0x68 0x00
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# 
#     set num 0
#     set id_data "RDID is "
#     while {$num < $byte_num + 1} {
#         if {$num >= 1} {
#             append id_data [string range [ReadReg 0x6c] end-1 end]
#         } else {
#             ReadReg 0x6c
#         }
#         incr num 1
#     }
#     return $id_data
# }
RDID 3
RDID is 20ba18
RDID 4
RDID is 20ba1810
ERROR: [Labtoolstcl 44-513] HW Target shutdown. Closing target: localhost:3121/xilinx_tcf/Digilent/210512180081
expr {0x102030 >> 16}
16
expr {0x102030 & 0xff0000}
1048576
expr {0x102030 >> 16}
16
expr {0x102030 % expr(2**16)}
invalid command name "tcl::mathfunc::expr"
expr {0x102030 % (2**16)}
8240
expr {0x102030 % (expr(2**16))}
invalid command name "tcl::mathfunc::expr"
expr {0x102030 % {expr(2**16)}}
can't use non-numeric string as operand of "%"
expr {0x102030 % pow(2,16)}
can't use floating-point value as operand of "%"
expr {0x102030 % expr(pow(2,16))}
invalid command name "tcl::mathfunc::expr"
expr {0x102030 >> 16}
16
expr {0x102030 >> 8}
4128
expr {fmod(expr (0x102030 >> 8),256)}
invalid command name "tcl::mathfunc::expr"
expr {fmod(0x1020,256)}
32.0
expr {0x1020%256)}
unbalanced close paren
in expression "0x1020%256)"
expr {0x1020 % 256}
32
expr {0x102030 % 256}
48
expr {0x102030 % expr{2**16}}
invalid bareword "expr"
in expression "0x102030 % expr{2**16}";
should be "$expr" or "{expr}" or "expr(...)" or ...
expr {0x102030 % expr(2**16)}
invalid command name "tcl::mathfunc::expr"
expr {0x102030 % [expr(2**16)]}
invalid command name "expr(2**16)"
2**16
[2**16]
expr {2**16}
65536
expr (0x102030 % expr{2**16})
invalid bareword "expr"
in expression "(0x102030 % expr{2**16})";
should be "$expr" or "{expr}" or "expr(...)" or ...
expr (0x102030 % expr(2**16))
invalid command name "tcl::mathfunc::expr"
expr (0x102030 % (expr(2**16)))
invalid command name "tcl::mathfunc::expr"
expr 0x102030 % (2**16)
8240
expr (0x102030 % (2**16)) >> 8
32
expr (0x102030 % (2**8))
48
INFO: [Labtoolstcl 44-466] Opening hw_target localhost:3121/xilinx_tcf/Digilent/210512180081
INFO: [Labtools 27-1435] Device xc7a35t (JTAG device index = 0) is not programmed (DONE status = 0).
WARNING: [Labtoolstcl 44-129] No matching hw_ila_data was found.
set_property PROBES.FILE {C:/Users/hjh09/Desktop/project/spi_test/prj/top.runs/impl_1/top.ltx} [get_hw_devices xc7a35t_0]
set_property FULL_PROBES.FILE {C:/Users/hjh09/Desktop/project/spi_test/prj/top.runs/impl_1/top.ltx} [get_hw_devices xc7a35t_0]
set_property PROGRAM.FILE {C:/Users/hjh09/Desktop/project/spi_test/prj/top.runs/impl_1/top.bit} [get_hw_devices xc7a35t_0]
program_hw_devices [get_hw_devices xc7a35t_0]
INFO: [Labtools 27-3164] End of startup status: HIGH
refresh_hw_device [lindex [get_hw_devices xc7a35t_0] 0]
INFO: [Labtools 27-2302] Device xc7a35t (JTAG device index = 0) is programmed with a design that has 1 JTAG AXI core(s).
source C:/Users/hjh09/Desktop/project/spi_test/tcl/axi_jtag.tcl
# proc ReadReg {address} {
#     set address [format 0x%08x $address]
#     create_hw_axi_txn rd_txn [get_hw_axis hw_axi_1] -address $address -type read
#     run_hw_axi rd_txn
#     set read_value [lindex [report_hw_axi_txn rd_txn] 1]
#     delete_hw_axi_txn rd_txn
#     return $read_value
# }
# proc WriteReg {address data} {
#     set address [format 0x%08x $address]
#     set data [format 0x%08x $data]
#     create_hw_axi_txn wr_txn [get_hw_axis hw_axi_1] -type write -address $address -data $data
#     run_hw_axi wr_txn
#     set write_value [lindex [report_hw_axi_txn wr_txn] 1]
#     delete_hw_axi_txn wr_txn
#     return $write_value
# }
# proc PP {address} {
#     # Write Address
#     puts [expr ($address >> 16)]
#     puts [expr ($address % (2**16)) >> 8]
#     puts [expr ($address % (2**8))]
#     set address [expr {$address + 128}]
#     puts [expr ($address >> 16)]
#     puts [expr ($address % (2**16)) >> 8]
#     puts [expr ($address % (2**8))]
# }
# PP 0x102030
16
32
48
16
32
176
# PP 1056816
16
32
48
16
32
176
source C:/Users/hjh09/Desktop/project/spi_test/tcl/flash_test.tcl
# proc RDID {byte_num} {
#     WriteReg 0x40 0xa
#     WriteReg 0x28 0x3fff
#     WriteReg 0x1c 0x80000000
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 9F, ËØ? FLASH ID
#     WriteReg 0x68 0x9f
#     # Ë¶ÅË?ªÂ°ËöÂ∞ë‰∏?Êï∞ÊçÆÂ∞±ÂÜôÂá†‰∏™ dummy Êï∞ÊçÆ
#     set num 0
#     while {$num < $byte_num} {
#         WriteReg 0x68 0x00
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# 
#     set num 0
#     set id_data "RDID is "
#     while {$num < $byte_num + 1} {
#         if {$num >= 1} {
#             append id_data [string range [ReadReg 0x6c] end-1 end]
#         } else {
#             ReadReg 0x6c
#         }
#         incr num 1
#     }
#     return $id_data
# }
# proc WREN {} {
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 06, ÂÜô‰ΩøËÉ?
#     WriteReg 0x68 0x06
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# }
# proc SE {Sector_Num} {
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = d8, ÊâáÂå∫Êì¶Èô§
#     WriteReg 0x68 0xd8
#     # Write Address
#     WriteReg 0x68 $Sector_Num
#     WriteReg 0x68 0x00
#     WriteReg 0x68 0x00
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# }
# proc BE {} {
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = c7, Êï¥ÁâáÊì¶Èô§
#     WriteReg 0x68 0xc7
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# }
# proc PP {address} {
# # ÂÖàÂÜôÂâ? 128 Byte, Âõ†‰∏∫FIFOÊ∑±Â∫¶256, ‰ΩÜÊòØcmd+Âú∞ÂùÄÂç†Áî®4Byte, ÊâÄ‰ª•ÂÆûÈôÖ‰ΩøÁî®‰∏çË∂?256ByteÂè?Áî°ß
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 02, È°µÂÜô
#     WriteReg 0x68 0x02
#     # Write Address
#     WriteReg 0x68 [expr ($address >> 16)]
#     WriteReg 0x68 [expr ($address % (2**16)) >> 8]
#     WriteReg 0x68 [expr ($address % (2**8))]
#     # Write Data
#     set num 0
#     while {$num < 128} {
#         WriteReg 0x68 $num
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# # ÂÜçÂÜôÂê? 128 Byte
#     set address [expr {$address + 128}]
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 02, È°µÂÜô
#     WriteReg 0x68 0x02
#     # Write Address
#     WriteReg 0x68 [expr ($address >> 16)]
#     WriteReg 0x68 [expr ($address % (2**16)) >> 8]
#     WriteReg 0x68 [expr ($address % (2**8))]
#     # Write Data
#     set num 128
#     while {$num < 256} {
#         WriteReg 0x68 $num
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# }
# proc READ {address number} {
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 03, ÊåâÂ≠óËäÇË?ªÊï∞Êç?
#     WriteReg 0x68 0x03
#     # Read Address
#     WriteReg 0x68 [expr ($address >> 16)]
#     WriteReg 0x68 [expr ($address % (2**16)) >> 8]
#     WriteReg 0x68 [expr ($address % (2**8))]
#     # Ë¶ÅË?ªÂ°ËöÂ∞ë‰∏?Êï∞ÊçÆÂ∞±ÂÜôÂá†‰∏™ dummy Êï∞ÊçÆ
#     set num 0
#     while {$num < $number} {
#         WriteReg 0x68 0x00
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# 
#     set num 0
#     set read_data "ReadData is "
#     while {$num < $byte_num + 4} {
#         if {$num >= 4} {
#             append read_data [string range [ReadReg 0x6c] end-1 end]
#         } else {
#             ReadReg 0x6c
#         }
#         incr num 1
#     }
#     return $read_data
# }
RDID
wrong # args: should be "RDID byte_num"
RDID 4
RDID is ffffffff
set_property PROBES.FILE {C:/Users/hjh09/Desktop/project/spi_test/prj/top.runs/impl_1/top.ltx} [get_hw_devices xc7a35t_0]
set_property FULL_PROBES.FILE {C:/Users/hjh09/Desktop/project/spi_test/prj/top.runs/impl_1/top.ltx} [get_hw_devices xc7a35t_0]
set_property PROGRAM.FILE {C:/Users/hjh09/Desktop/project/spi_test/prj/top.runs/impl_1/top.bit} [get_hw_devices xc7a35t_0]
program_hw_devices [get_hw_devices xc7a35t_0]
INFO: [Labtools 27-3164] End of startup status: HIGH
refresh_hw_device [lindex [get_hw_devices xc7a35t_0] 0]
INFO: [Labtools 27-2302] Device xc7a35t (JTAG device index = 0) is programmed with a design that has 1 JTAG AXI core(s).
source C:/Users/hjh09/Desktop/project/spi_test/tcl/axi_jtag.tcl
# proc ReadReg {address} {
#     set address [format 0x%08x $address]
#     create_hw_axi_txn rd_txn [get_hw_axis hw_axi_1] -address $address -type read
#     run_hw_axi rd_txn
#     set read_value [lindex [report_hw_axi_txn rd_txn] 1]
#     delete_hw_axi_txn rd_txn
#     return $read_value
# }
# proc WriteReg {address data} {
#     set address [format 0x%08x $address]
#     set data [format 0x%08x $data]
#     create_hw_axi_txn wr_txn [get_hw_axis hw_axi_1] -type write -address $address -data $data
#     run_hw_axi wr_txn
#     set write_value [lindex [report_hw_axi_txn wr_txn] 1]
#     delete_hw_axi_txn wr_txn
#     return $write_value
# }
source C:/Users/hjh09/Desktop/project/spi_test/tcl/flash_test.tcl
# proc RDID {byte_num} {
#     WriteReg 0x40 0xa
#     WriteReg 0x28 0x3fff
#     WriteReg 0x1c 0x80000000
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 9F, ËØ? FLASH ID
#     WriteReg 0x68 0x9f
#     # Ë¶ÅË?ªÂ°ËöÂ∞ë‰∏?Êï∞ÊçÆÂ∞±ÂÜôÂá†‰∏™ dummy Êï∞ÊçÆ
#     set num 0
#     while {$num < $byte_num} {
#         WriteReg 0x68 0x00
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# 
#     set num 0
#     set id_data "RDID is "
#     while {$num < $byte_num + 1} {
#         if {$num >= 1} {
#             append id_data [string range [ReadReg 0x6c] end-1 end]
#         } else {
#             ReadReg 0x6c
#         }
#         incr num 1
#     }
#     return $id_data
# }
# proc WREN {} {
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 06, ÂÜô‰ΩøËÉ?
#     WriteReg 0x68 0x06
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# }
# proc SE {Sector_Num} {
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = d8, ÊâáÂå∫Êì¶Èô§
#     WriteReg 0x68 0xd8
#     # Write Address
#     WriteReg 0x68 $Sector_Num
#     WriteReg 0x68 0x00
#     WriteReg 0x68 0x00
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# }
# proc BE {} {
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = c7, Êï¥ÁâáÊì¶Èô§
#     WriteReg 0x68 0xc7
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# }
# proc PP {address} {
# # ÂÖàÂÜôÂâ? 128 Byte, Âõ†‰∏∫FIFOÊ∑±Â∫¶256, ‰ΩÜÊòØcmd+Âú∞ÂùÄÂç†Áî®4Byte, ÊâÄ‰ª•ÂÆûÈôÖ‰ΩøÁî®‰∏çË∂?256ByteÂè?Áî°ß
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 02, È°µÂÜô
#     WriteReg 0x68 0x02
#     # Write Address
#     WriteReg 0x68 [expr ($address >> 16)]
#     WriteReg 0x68 [expr ($address % (2**16)) >> 8]
#     WriteReg 0x68 [expr ($address % (2**8))]
#     # Write Data
#     set num 0
#     while {$num < 128} {
#         WriteReg 0x68 $num
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# # ÂÜçÂÜôÂê? 128 Byte
#     set address [expr {$address + 128}]
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 02, È°µÂÜô
#     WriteReg 0x68 0x02
#     # Write Address
#     WriteReg 0x68 [expr ($address >> 16)]
#     WriteReg 0x68 [expr ($address % (2**16)) >> 8]
#     WriteReg 0x68 [expr ($address % (2**8))]
#     # Write Data
#     set num 128
#     while {$num < 256} {
#         WriteReg 0x68 $num
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# }
# proc READ {address number} {
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 03, ÊåâÂ≠óËäÇË?ªÊï∞Êç?
#     WriteReg 0x68 0x03
#     # Read Address
#     WriteReg 0x68 [expr ($address >> 16)]
#     WriteReg 0x68 [expr ($address % (2**16)) >> 8]
#     WriteReg 0x68 [expr ($address % (2**8))]
#     # Ë¶ÅË?ªÂ°ËöÂ∞ë‰∏?Êï∞ÊçÆÂ∞±ÂÜôÂá†‰∏™ dummy Êï∞ÊçÆ
#     set num 0
#     while {$num < $number} {
#         WriteReg 0x68 0x00
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# 
#     set num 0
#     set read_data "ReadData is "
#     while {$num < $byte_num + 4} {
#         if {$num >= 4} {
#             append read_data [string range [ReadReg 0x6c] end-1 end]
#         } else {
#             ReadReg 0x6c
#         }
#         incr num 1
#     }
#     return $read_data
# }
RDID 3
RDID is ffffff
ReadReg 0x78
00000000
RDID 3
RDID is 20ba18
RDID 4
RDID is 20ba1810
RDID 8
RDID is 20ba181000002373
READ 0x1000 10
can't read "byte_num": no such variable
ReadReg 0x78
0000000d
READ 0x1000 10
can't read "byte_num": no such variable
source C:/Users/hjh09/Desktop/project/spi_test/tcl/flash_test.tcl
# proc RDID {byte_num} {
#     WriteReg 0x40 0xa
#     WriteReg 0x28 0x3fff
#     WriteReg 0x1c 0x80000000
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 9F, ËØ? FLASH ID
#     WriteReg 0x68 0x9f
#     # Ë¶ÅË?ªÂ°ËöÂ∞ë‰∏?Êï∞ÊçÆÂ∞±ÂÜôÂá†‰∏™ dummy Êï∞ÊçÆ
#     set num 0
#     while {$num < $byte_num} {
#         WriteReg 0x68 0x00
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# 
#     set num 0
#     set id_data "RDID is "
#     while {$num < $byte_num + 1} {
#         if {$num >= 1} {
#             append id_data [string range [ReadReg 0x6c] end-1 end]
#         } else {
#             ReadReg 0x6c
#         }
#         incr num 1
#     }
#     return $id_data
# }
# proc WREN {} {
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 06, ÂÜô‰ΩøËÉ?
#     WriteReg 0x68 0x06
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# }
# proc SE {Sector_Num} {
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = d8, ÊâáÂå∫Êì¶Èô§
#     WriteReg 0x68 0xd8
#     # Write Address
#     WriteReg 0x68 $Sector_Num
#     WriteReg 0x68 0x00
#     WriteReg 0x68 0x00
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# }
# proc BE {} {
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = c7, Êï¥ÁâáÊì¶Èô§
#     WriteReg 0x68 0xc7
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# }
# proc PP {address} {
# # ÂÖàÂÜôÂâ? 128 Byte, Âõ†‰∏∫FIFOÊ∑±Â∫¶256, ‰ΩÜÊòØcmd+Âú∞ÂùÄÂç†Áî®4Byte, ÊâÄ‰ª•ÂÆûÈôÖ‰ΩøÁî®‰∏çË∂?256ByteÂè?Áî°ß
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 02, È°µÂÜô
#     WriteReg 0x68 0x02
#     # Write Address
#     WriteReg 0x68 [expr ($address >> 16)]
#     WriteReg 0x68 [expr ($address % (2**16)) >> 8]
#     WriteReg 0x68 [expr ($address % (2**8))]
#     # Write Data
#     set num 0
#     while {$num < 128} {
#         WriteReg 0x68 $num
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# # ÂÜçÂÜôÂê? 128 Byte
#     set address [expr {$address + 128}]
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 02, È°µÂÜô
#     WriteReg 0x68 0x02
#     # Write Address
#     WriteReg 0x68 [expr ($address >> 16)]
#     WriteReg 0x68 [expr ($address % (2**16)) >> 8]
#     WriteReg 0x68 [expr ($address % (2**8))]
#     # Write Data
#     set num 128
#     while {$num < 256} {
#         WriteReg 0x68 $num
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# }
# proc READ {address number} {
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 03, ÊåâÂ≠óËäÇË?ªÊï∞Êç?
#     WriteReg 0x68 0x03
#     # Read Address
#     WriteReg 0x68 [expr ($address >> 16)]
#     WriteReg 0x68 [expr ($address % (2**16)) >> 8]
#     WriteReg 0x68 [expr ($address % (2**8))]
#     # Ë¶ÅË?ªÂ°ËöÂ∞ë‰∏?Êï∞ÊçÆÂ∞±ÂÜôÂá†‰∏™ dummy Êï∞ÊçÆ
#     set num 0
#     while {$num < $number} {
#         WriteReg 0x68 0x00
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# 
#     set num 0
#     set read_data "ReadData is "
#     while {$num < $number + 4} {
#         if {$num >= 4} {
#             append read_data [string range [ReadReg 0x6c] end-1 end]
#         } else {
#             ReadReg 0x6c
#         }
#         incr num 1
#     }
#     return $read_data
# }
READ 0x1000 10
ReadData is 00000000000000000000
SE 1
00000186
READ 0x1000 10
ReadData is 00000000000000000000
BE
00000186
READ 0x1000 10
ReadData is 00000000000000000000
READ 0x100 20
ReadData is 0000000000000000000000000000000000000800
WREN
00000186
SE 1
00000186
READ 0x100 20
ReadData is 0000000000000000000000000000000000000800
SE 0
00000186
READ 0x100 20
ReadData is 0000000000000000000000000000000000000800
BE
00000186
READ 0x100 20
ReadData is 0000000000000000000000000000000000000800
WREN
00000186
BE
00000186
READ 0x100 20
ReadData is ffffffffffffffffffffffffffffffffffffffff
PP 0x100
00000186
READ 0x100 20
ReadData is ffffffffffffffffffffffffffffffffffffffff
READ 0x100 20
ReadData is ffffffffffffffffffffffffffffffffffffffff
WREN
00000186
PP 0x100
00000186
READ 0x100 20
ReadData is 000102030405060708090a0b0c0d0e0f10111213
READ 0x114 20
ReadData is 1415161718191a1b1c1d1e1f2021222324252627
READ 0x100 128
ReadData is 000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f
READ 0x100 256
ReadData is 000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
READ 0x180 128
ReadData is ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
source C:/Users/hjh09/Desktop/project/spi_test/tcl/flash_test.tcl
# proc RDID {byte_num} {
#     WriteReg 0x40 0xa
#     WriteReg 0x28 0x3fff
#     WriteReg 0x1c 0x80000000
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 9F, ËØ? FLASH ID
#     WriteReg 0x68 0x9f
#     # Ë¶ÅË?ªÂ°ËöÂ∞ë‰∏?Êï∞ÊçÆÂ∞±ÂÜôÂá†‰∏™ dummy Êï∞ÊçÆ
#     set num 0
#     while {$num < $byte_num} {
#         WriteReg 0x68 0x00
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# 
#     set num 0
#     set id_data "RDID is "
#     while {$num < $byte_num + 1} {
#         if {$num >= 1} {
#             append id_data [string range [ReadReg 0x6c] end-1 end]
#         } else {
#             ReadReg 0x6c
#         }
#         incr num 1
#     }
#     return $id_data
# }
# proc WREN {} {
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 06, ÂÜô‰ΩøËÉ?
#     WriteReg 0x68 0x06
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# }
# proc SE {Sector_Num} {
#     WREN
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = d8, ÊâáÂå∫Êì¶Èô§
#     WriteReg 0x68 0xd8
#     # Write Address
#     WriteReg 0x68 $Sector_Num
#     WriteReg 0x68 0x00
#     WriteReg 0x68 0x00
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# }
# proc BE {} {
#     WREN
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = c7, Êï¥ÁâáÊì¶Èô§
#     WriteReg 0x68 0xc7
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# }
# proc PP {address} {
#     WREN
# # ÂÖàÂÜôÂâ? 128 Byte, Âõ†‰∏∫FIFOÊ∑±Â∫¶256, ‰ΩÜÊòØcmd+Âú∞ÂùÄÂç†Áî®4Byte, ÊâÄ‰ª•ÂÆûÈôÖ‰ΩøÁî®‰∏çË∂?256ByteÂè?Áî°ß
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 02, È°µÂÜô
#     WriteReg 0x68 0x02
#     # Write Address
#     WriteReg 0x68 [expr ($address >> 16)]
#     WriteReg 0x68 [expr ($address % (2**16)) >> 8]
#     WriteReg 0x68 [expr ($address % (2**8))]
#     # Write Data
#     set num 0
#     while {$num < 128} {
#         WriteReg 0x68 $num
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# # ÂÜçÂÜôÂê? 128 Byte
#     set address [expr {$address + 128}]
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 02, È°µÂÜô
#     WriteReg 0x68 0x02
#     # Write Address
#     WriteReg 0x68 [expr ($address >> 16)]
#     WriteReg 0x68 [expr ($address % (2**16)) >> 8]
#     WriteReg 0x68 [expr ($address % (2**8))]
#     # Write Data
#     while {$num < 256} {
#         WriteReg 0x68 $num
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# }
# proc READ {address number} {
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 03, ÊåâÂ≠óËäÇË?ªÊï∞Êç?
#     WriteReg 0x68 0x03
#     # Read Address
#     WriteReg 0x68 [expr ($address >> 16)]
#     WriteReg 0x68 [expr ($address % (2**16)) >> 8]
#     WriteReg 0x68 [expr ($address % (2**8))]
#     # Ë¶ÅË?ªÂ°ËöÂ∞ë‰∏?Êï∞ÊçÆÂ∞±ÂÜôÂá†‰∏™ dummy Êï∞ÊçÆ
#     set num 0
#     while {$num < $number} {
#         WriteReg 0x68 0x00
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# 
#     set num 0
#     set read_data "ReadData is "
#     while {$num < $number + 4} {
#         if {$num >= 4} {
#             append read_data [string range [ReadReg 0x6c] end-1 end]
#         } else {
#             ReadReg 0x6c
#         }
#         incr num 1
#     }
#     return $read_data
# }
READ 0x100 128
ReadData is 000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f
SE 0
00000186
READ 0x100 128
ReadData is ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
PP 0x100
00000186
READ 0x100 128
ReadData is 000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f
READ 0x180 128
ReadData is ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
PP 0x180
00000186
READ 0x180 128
ReadData is 000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f
source C:/Users/hjh09/Desktop/project/spi_test/tcl/flash_test.tcl
# proc RDID {byte_num} {
#     WriteReg 0x40 0xa
#     WriteReg 0x28 0x3fff
#     WriteReg 0x1c 0x80000000
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 9F, ËØ? FLASH ID
#     WriteReg 0x68 0x9f
#     # Ë¶ÅË?ªÂ°ËöÂ∞ë‰∏?Êï∞ÊçÆÂ∞±ÂÜôÂá†‰∏™ dummy Êï∞ÊçÆ
#     set num 0
#     while {$num < $byte_num} {
#         WriteReg 0x68 0x00
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# 
#     set num 0
#     set id_data "RDID is "
#     while {$num < $byte_num + 1} {
#         if {$num >= 1} {
#             append id_data [string range [ReadReg 0x6c] end-1 end]
#         } else {
#             ReadReg 0x6c
#         }
#         incr num 1
#     }
#     return $id_data
# }
# proc WREN {} {
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 06, ÂÜô‰ΩøËÉ?
#     WriteReg 0x68 0x06
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# }
# proc SE {Sector_Num} {
#     WREN
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = d8, ÊâáÂå∫Êì¶Èô§
#     WriteReg 0x68 0xd8
#     # Write Address
#     WriteReg 0x68 $Sector_Num
#     WriteReg 0x68 0x00
#     WriteReg 0x68 0x00
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
#     return "Sector Erase Done!"
# }
# proc BE {} {
#     WREN
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = c7, Êï¥ÁâáÊì¶Èô§
#     WriteReg 0x68 0xc7
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
#     return "Bulk Erase Done!"
# }
# proc PP {address} {
#     WREN
# # ÂÖàÂÜôÂâ? 128 Byte, Âõ†‰∏∫FIFOÊ∑±Â∫¶256, ‰ΩÜÊòØcmd+Âú∞ÂùÄÂç†Áî®4Byte, ÊâÄ‰ª•ÂÆûÈôÖ‰ΩøÁî®‰∏çË∂?256ByteÂè?Áî°ß
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 02, È°µÂÜô
#     WriteReg 0x68 0x02
#     # Write Address
#     WriteReg 0x68 [expr ($address >> 16)]
#     WriteReg 0x68 [expr ($address % (2**16)) >> 8]
#     WriteReg 0x68 [expr ($address % (2**8))]
#     # Write Data
#     set num 0
#     while {$num < 128} {
#         WriteReg 0x68 $num
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# # ÂÜçÂÜôÂê? 128 Byte
#     set address [expr {$address + 128}]
#     puts [ format 0x%08x $address]
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 02, È°µÂÜô
#     WriteReg 0x68 0x02
#     # Write Address
#     WriteReg 0x68 [expr ($address >> 16)]
#     WriteReg 0x68 [expr ($address % (2**16)) >> 8]
#     WriteReg 0x68 [expr ($address % (2**8))]
#     # Write Data
#     while {$num < 256} {
#         WriteReg 0x68 $num
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
#     return "Page Program Done!"
# }
# proc READ {address number} {
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 03, ÊåâÂ≠óËäÇË?ªÊï∞Êç?
#     WriteReg 0x68 0x03
#     # Read Address
#     WriteReg 0x68 [expr ($address >> 16)]
#     WriteReg 0x68 [expr ($address % (2**16)) >> 8]
#     WriteReg 0x68 [expr ($address % (2**8))]
#     # Ë¶ÅË?ªÂ°ËöÂ∞ë‰∏?Êï∞ÊçÆÂ∞±ÂÜôÂá†‰∏™ dummy Êï∞ÊçÆ
#     set num 0
#     while {$num < $number} {
#         WriteReg 0x68 0x00
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# 
#     set num 0
#     set read_data "ReadData is "
#     while {$num < $number + 4} {
#         if {$num >= 4} {
#             append read_data [string range [ReadReg 0x6c] end-1 end]
#         } else {
#             ReadReg 0x6c
#         }
#         incr num 1
#     }
#     return $read_data
# }
BE
Bulk Erase Done!
READ 0x100 128
ReadData is ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
PP 0x100
0x00000180
Page Program Done!
READ 0x100 128
ReadData is ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
READ 0x100 128
ReadData is ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
PP 0x100
0x00000180
Page Program Done!
READ 0x100 128
ReadData is 000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f
READ 0x180 128
ReadData is ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
PP 0x100
0x00000180
Page Program Done!
READ 0x180 128
ReadData is ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ERROR: [Labtoolstcl 44-513] HW Target shutdown. Closing target: localhost:3121/xilinx_tcf/Digilent/210512180081
INFO: [Labtoolstcl 44-466] Opening hw_target localhost:3121/xilinx_tcf/Digilent/210512180081
INFO: [Labtools 27-2302] Device xc7a35t (JTAG device index = 0) is programmed with a design that has 1 JTAG AXI core(s).
WARNING: [Labtoolstcl 44-129] No matching hw_ila_data was found.
source C:/Users/hjh09/Desktop/project/spi_test/tcl/flash_test.tcl
# proc RDID {byte_num} {
#     WriteReg 0x40 0xa
#     WriteReg 0x28 0x3fff
#     WriteReg 0x1c 0x80000000
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 9F, ËØ? FLASH ID
#     WriteReg 0x68 0x9f
#     # Ë¶ÅË?ªÂ°ËöÂ∞ë‰∏?Êï∞ÊçÆÂ∞±ÂÜôÂá†‰∏™ dummy Êï∞ÊçÆ
#     set num 0
#     while {$num < $byte_num} {
#         WriteReg 0x68 0x00
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# 
#     set num 0
#     set id_data "RDID is "
#     while {$num < $byte_num + 1} {
#         if {$num >= 1} {
#             append id_data [string range [ReadReg 0x6c] end-1 end]
#         } else {
#             ReadReg 0x6c
#         }
#         incr num 1
#     }
#     return $id_data
# }
# proc WREN {} {
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 06, ÂÜô‰ΩøËÉ?
#     WriteReg 0x68 0x06
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# }
# proc SE {Sector_Num} {
#     WREN
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = d8, ÊâáÂå∫Êì¶Èô§
#     WriteReg 0x68 0xd8
#     # Write Address
#     WriteReg 0x68 $Sector_Num
#     WriteReg 0x68 0x00
#     WriteReg 0x68 0x00
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
#     return "Sector Erase Done!"
# }
# proc BE {} {
#     WREN
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = c7, Êï¥ÁâáÊì¶Èô§
#     WriteReg 0x68 0xc7
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
#     return "Bulk Erase Done!"
# }
# proc PP {address} {
#     WREN
# # ÂÖàÂÜôÂâ? 128 Byte, Âõ†‰∏∫FIFOÊ∑±Â∫¶256, ‰ΩÜÊòØcmd+Âú∞ÂùÄÂç†Áî®4Byte, ÊâÄ‰ª•ÂÆûÈôÖ‰ΩøÁî®‰∏çË∂?256ByteÂè?Áî°ß
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 02, È°µÂÜô
#     WriteReg 0x68 0x02
#     # Write Address
#     WriteReg 0x68 [expr ($address >> 16)]
#     WriteReg 0x68 [expr ($address % (2**16)) >> 8]
#     WriteReg 0x68 [expr ($address % (2**8))]
#     # Write Data
#     set num 0
#     while {$num < 128} {
#         WriteReg 0x68 $num
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# # ÂÜçÂÜôÂê? 128 Byte
#     WREN
#     set address [expr {$address + 128}]
#     puts [ format 0x%08x $address]
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 02, È°µÂÜô
#     WriteReg 0x68 0x02
#     # Write Address
#     WriteReg 0x68 [expr ($address >> 16)]
#     WriteReg 0x68 [expr ($address % (2**16)) >> 8]
#     WriteReg 0x68 [expr ($address % (2**8))]
#     # Write Data
#     while {$num < 256} {
#         WriteReg 0x68 $num
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
#     return "Page Program Done!"
# }
# proc READ {address number} {
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 03, ÊåâÂ≠óËäÇË?ªÊï∞Êç?
#     WriteReg 0x68 0x03
#     # Read Address
#     WriteReg 0x68 [expr ($address >> 16)]
#     WriteReg 0x68 [expr ($address % (2**16)) >> 8]
#     WriteReg 0x68 [expr ($address % (2**8))]
#     # Ë¶ÅË?ªÂ°ËöÂ∞ë‰∏?Êï∞ÊçÆÂ∞±ÂÜôÂá†‰∏™ dummy Êï∞ÊçÆ
#     set num 0
#     while {$num < $number} {
#         WriteReg 0x68 0x00
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# 
#     set num 0
#     set read_data "ReadData is "
#     while {$num < $number + 4} {
#         if {$num >= 4} {
#             append read_data [string range [ReadReg 0x6c] end-1 end]
#         } else {
#             ReadReg 0x6c
#         }
#         incr num 1
#     }
#     return $read_data
# }
READ 0x180 128
ReadData is ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
READ 0x100 128
ReadData is 000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f
SE 0x0
Sector Erase Done!
READ 0x100 128
ReadData is ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
PP 0x100
0x00000180
Page Program Done!
READ 0x100 128
ReadData is 000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f
READ 0x180 128
ReadData is 808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfcfdfeff
source C:/Users/hjh09/Desktop/project/spi_test/tcl/flash_test.tcl
# proc RDID {byte_num} {
#     WriteReg 0x40 0xa
#     WriteReg 0x28 0x3fff
#     WriteReg 0x1c 0x80000000
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 9F, ËØ? FLASH ID
#     WriteReg 0x68 0x9f
#     # Ë¶ÅË?ªÂ°ËöÂ∞ë‰∏?Êï∞ÊçÆÂ∞±ÂÜôÂá†‰∏™ dummy Êï∞ÊçÆ
#     set num 0
#     while {$num < $byte_num} {
#         WriteReg 0x68 0x00
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# 
#     set num 0
#     set id_data "RDID is "
#     while {$num < $byte_num + 1} {
#         if {$num >= 1} {
#             append id_data [string range [ReadReg 0x6c] end-1 end]
#         } else {
#             ReadReg 0x6c
#         }
#         incr num 1
#     }
#     return $id_data
# }
# proc WREN {} {
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 06, ÂÜô‰ΩøËÉ?
#     WriteReg 0x68 0x06
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
#     return "Write Enable!"
# }
# proc SE {Sector_Num} {
#     WREN
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = d8, ÊâáÂå∫Êì¶Èô§
#     WriteReg 0x68 0xd8
#     # Write Address
#     WriteReg 0x68 $Sector_Num
#     WriteReg 0x68 0x00
#     WriteReg 0x68 0x00
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
#     return "Sector Erase Done!"
# }
# proc BE {} {
#     WREN
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = c7, Êï¥ÁâáÊì¶Èô§
#     WriteReg 0x68 0xc7
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
#     return "Bulk Erase Done!"
# }
# proc PP {address} {
#     WREN
# # ÂÖàÂÜôÂâ? 128 Byte, Âõ†‰∏∫FIFOÊ∑±Â∫¶256, ‰ΩÜÊòØcmd+Âú∞ÂùÄÂç†Áî®4Byte, ÊâÄ‰ª•ÂÆûÈôÖ‰ΩøÁî®‰∏çË∂?256ByteÂè?Áî°ß
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 02, È°µÂÜô
#     WriteReg 0x68 0x02
#     # Write Address
#     WriteReg 0x68 [expr ($address >> 16)]
#     WriteReg 0x68 [expr ($address % (2**16)) >> 8]
#     WriteReg 0x68 [expr ($address % (2**8))]
#     # Write Data
#     set num 0
#     while {$num < 128} {
#         WriteReg 0x68 $num
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# # ÂÜçÂÜôÂê? 128 Byte
#     WREN
#     set address [expr {$address + 128}]
#     puts [ format 0x%08x $address]
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 02, È°µÂÜô
#     WriteReg 0x68 0x02
#     # Write Address
#     WriteReg 0x68 [expr ($address >> 16)]
#     WriteReg 0x68 [expr ($address % (2**16)) >> 8]
#     WriteReg 0x68 [expr ($address % (2**8))]
#     # Write Data
#     while {$num < 256} {
#         WriteReg 0x68 $num
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
#     return "Page Program Done!"
# }
# proc READ {address number} {
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 03, ÊåâÂ≠óËäÇË?ªÊï∞Êç?
#     WriteReg 0x68 0x03
#     # Read Address
#     WriteReg 0x68 [expr ($address >> 16)]
#     WriteReg 0x68 [expr ($address % (2**16)) >> 8]
#     WriteReg 0x68 [expr ($address % (2**8))]
#     # Ë¶ÅË?ªÂ°ËöÂ∞ë‰∏?Êï∞ÊçÆÂ∞±ÂÜôÂá†‰∏™ dummy Êï∞ÊçÆ
#     set num 0
#     while {$num < $number} {
#         WriteReg 0x68 0x00
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# 
#     ######################## ÂÜôÊñá‰ª? ########################
#     set fn "./data.txt"
#     set fid [open $fn w+]
#     set num 0
#     puts $fid "Number   Address   Data"
#     while {$num < $number + 4} {
#         puts $fid [format "%8d %#08x %#2x" ($num-3) ($address + $num - 3) [string range [ReadReg 0x6c] end-1 end]]
#         incr num 1
#     }
#     close $fid
#     puts "Read Done!"
#     # set num 0
#     # set read_data "ReadData is "
#     # while {$num < $number + 4} {
#     #     if {$num >= 4} {
#     #         append read_data [string range [ReadReg 0x6c] end-1 end]
#     #     } else {
#     #         ReadReg 0x6c
#     #     }
#     #     incr num 1
#     # }
#     # return $read_data
# }
READ 0x100 128
expected integer but got "(0-3)"
source C:/Users/hjh09/Desktop/project/spi_test/tcl/flash_test.tcl
# proc RDID {byte_num} {
#     WriteReg 0x40 0xa
#     WriteReg 0x28 0x3fff
#     WriteReg 0x1c 0x80000000
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 9F, ËØ? FLASH ID
#     WriteReg 0x68 0x9f
#     # Ë¶ÅË?ªÂ°ËöÂ∞ë‰∏?Êï∞ÊçÆÂ∞±ÂÜôÂá†‰∏™ dummy Êï∞ÊçÆ
#     set num 0
#     while {$num < $byte_num} {
#         WriteReg 0x68 0x00
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# 
#     set num 0
#     set id_data "RDID is "
#     while {$num < $byte_num + 1} {
#         if {$num >= 1} {
#             append id_data [string range [ReadReg 0x6c] end-1 end]
#         } else {
#             ReadReg 0x6c
#         }
#         incr num 1
#     }
#     return $id_data
# }
# proc WREN {} {
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 06, ÂÜô‰ΩøËÉ?
#     WriteReg 0x68 0x06
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
#     return "Write Enable!"
# }
# proc SE {Sector_Num} {
#     WREN
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = d8, ÊâáÂå∫Êì¶Èô§
#     WriteReg 0x68 0xd8
#     # Write Address
#     WriteReg 0x68 $Sector_Num
#     WriteReg 0x68 0x00
#     WriteReg 0x68 0x00
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
#     return "Sector Erase Done!"
# }
# proc BE {} {
#     WREN
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = c7, Êï¥ÁâáÊì¶Èô§
#     WriteReg 0x68 0xc7
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
#     return "Bulk Erase Done!"
# }
# proc PP {address} {
#     WREN
# # ÂÖàÂÜôÂâ? 128 Byte, Âõ†‰∏∫FIFOÊ∑±Â∫¶256, ‰ΩÜÊòØcmd+Âú∞ÂùÄÂç†Áî®4Byte, ÊâÄ‰ª•ÂÆûÈôÖ‰ΩøÁî®‰∏çË∂?256ByteÂè?Áî°ß
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 02, È°µÂÜô
#     WriteReg 0x68 0x02
#     # Write Address
#     WriteReg 0x68 [expr ($address >> 16)]
#     WriteReg 0x68 [expr ($address % (2**16)) >> 8]
#     WriteReg 0x68 [expr ($address % (2**8))]
#     # Write Data
#     set num 0
#     while {$num < 128} {
#         WriteReg 0x68 $num
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# # ÂÜçÂÜôÂê? 128 Byte
#     WREN
#     set address [expr {$address + 128}]
#     puts [ format 0x%08x $address]
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 02, È°µÂÜô
#     WriteReg 0x68 0x02
#     # Write Address
#     WriteReg 0x68 [expr ($address >> 16)]
#     WriteReg 0x68 [expr ($address % (2**16)) >> 8]
#     WriteReg 0x68 [expr ($address % (2**8))]
#     # Write Data
#     while {$num < 256} {
#         WriteReg 0x68 $num
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
#     return "Page Program Done!"
# }
# proc READ {address number} {
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 03, ÊåâÂ≠óËäÇË?ªÊï∞Êç?
#     WriteReg 0x68 0x03
#     # Read Address
#     WriteReg 0x68 [expr ($address >> 16)]
#     WriteReg 0x68 [expr ($address % (2**16)) >> 8]
#     WriteReg 0x68 [expr ($address % (2**8))]
#     # Ë¶ÅË?ªÂ°ËöÂ∞ë‰∏?Êï∞ÊçÆÂ∞±ÂÜôÂá†‰∏™ dummy Êï∞ÊçÆ
#     set num 0
#     while {$num < $number} {
#         WriteReg 0x68 0x00
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# 
#     ######################## ÂÜôÊñá‰ª? ########################
#     set fn "./data.txt"
#     set fid [open $fn w+]
#     set num 0
#     puts $fid "Number   Address   Data"
#     while {$num < $number + 4} {
#         if {$num >= 4} {
#             puts $fid [format "%8d %#08x %#2x" ($num-3) ($address + $num - 3) [string range [ReadReg 0x6c] end-1 end]]
#         } else {
#             ReadReg 0x6c
#         }
#         incr num 1
#     }
#     close $fid
#     puts "Read Done!"
#     # set num 0
#     # set read_data "ReadData is "
#     # while {$num < $number + 4} {
#     #     if {$num >= 4} {
#     #         append read_data [string range [ReadReg 0x6c] end-1 end]
#     #     } else {
#     #         ReadReg 0x6c
#     #     }
#     #     incr num 1
#     # }
#     # return $read_data
# }
READ 0x100 128
expected integer but got "(4-3)"
source C:/Users/hjh09/Desktop/project/spi_test/tcl/flash_test.tcl
# proc RDID {byte_num} {
#     WriteReg 0x40 0xa
#     WriteReg 0x28 0x3fff
#     WriteReg 0x1c 0x80000000
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 9F, ËØ? FLASH ID
#     WriteReg 0x68 0x9f
#     # Ë¶ÅË?ªÂ°ËöÂ∞ë‰∏?Êï∞ÊçÆÂ∞±ÂÜôÂá†‰∏™ dummy Êï∞ÊçÆ
#     set num 0
#     while {$num < $byte_num} {
#         WriteReg 0x68 0x00
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# 
#     set num 0
#     set id_data "RDID is "
#     while {$num < $byte_num + 1} {
#         if {$num >= 1} {
#             append id_data [string range [ReadReg 0x6c] end-1 end]
#         } else {
#             ReadReg 0x6c
#         }
#         incr num 1
#     }
#     return $id_data
# }
# proc WREN {} {
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 06, ÂÜô‰ΩøËÉ?
#     WriteReg 0x68 0x06
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
#     return "Write Enable!"
# }
# proc SE {Sector_Num} {
#     WREN
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = d8, ÊâáÂå∫Êì¶Èô§
#     WriteReg 0x68 0xd8
#     # Write Address
#     WriteReg 0x68 $Sector_Num
#     WriteReg 0x68 0x00
#     WriteReg 0x68 0x00
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
#     return "Sector Erase Done!"
# }
# proc BE {} {
#     WREN
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = c7, Êï¥ÁâáÊì¶Èô§
#     WriteReg 0x68 0xc7
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
#     return "Bulk Erase Done!"
# }
# proc PP {address} {
#     WREN
# # ÂÖàÂÜôÂâ? 128 Byte, Âõ†‰∏∫FIFOÊ∑±Â∫¶256, ‰ΩÜÊòØcmd+Âú∞ÂùÄÂç†Áî®4Byte, ÊâÄ‰ª•ÂÆûÈôÖ‰ΩøÁî®‰∏çË∂?256ByteÂè?Áî°ß
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 02, È°µÂÜô
#     WriteReg 0x68 0x02
#     # Write Address
#     WriteReg 0x68 [expr ($address >> 16)]
#     WriteReg 0x68 [expr ($address % (2**16)) >> 8]
#     WriteReg 0x68 [expr ($address % (2**8))]
#     # Write Data
#     set num 0
#     while {$num < 128} {
#         WriteReg 0x68 $num
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# # ÂÜçÂÜôÂê? 128 Byte
#     WREN
#     set address [expr {$address + 128}]
#     puts [ format 0x%08x $address]
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 02, È°µÂÜô
#     WriteReg 0x68 0x02
#     # Write Address
#     WriteReg 0x68 [expr ($address >> 16)]
#     WriteReg 0x68 [expr ($address % (2**16)) >> 8]
#     WriteReg 0x68 [expr ($address % (2**8))]
#     # Write Data
#     while {$num < 256} {
#         WriteReg 0x68 $num
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
#     return "Page Program Done!"
# }
# proc READ {address number} {
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 03, ÊåâÂ≠óËäÇË?ªÊï∞Êç?
#     WriteReg 0x68 0x03
#     # Read Address
#     WriteReg 0x68 [expr ($address >> 16)]
#     WriteReg 0x68 [expr ($address % (2**16)) >> 8]
#     WriteReg 0x68 [expr ($address % (2**8))]
#     # Ë¶ÅË?ªÂ°ËöÂ∞ë‰∏?Êï∞ÊçÆÂ∞±ÂÜôÂá†‰∏™ dummy Êï∞ÊçÆ
#     set num 0
#     while {$num < $number} {
#         WriteReg 0x68 0x00
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# 
#     ######################## ÂÜôÊñá‰ª? ########################
#     set fn "./data.txt"
#     set fid [open $fn w+]
#     set num 0
#     puts $fid "Number   Address   Data"
#     while {$num < $number + 4} {
#         if {$num >= 4} {
#             puts $fid [format "%8d %#08x %#2x" [expr {$num-3}] [expr {$address + $num - 3}] [string range [ReadReg 0x6c] end-1 end]]
#         } else {
#             ReadReg 0x6c
#         }
#         incr num 1
#     }
#     close $fid
#     puts "Read Done!"
#     # set num 0
#     # set read_data "ReadData is "
#     # while {$num < $number + 4} {
#     #     if {$num >= 4} {
#     #         append read_data [string range [ReadReg 0x6c] end-1 end]
#     #     } else {
#     #         ReadReg 0x6c
#     #     }
#     #     incr num 1
#     # }
#     # return $read_data
# }
READ 0x100 128
expected integer but got "08"
source C:/Users/hjh09/Desktop/project/spi_test/tcl/flash_test.tcl
# proc RDID {byte_num} {
#     WriteReg 0x40 0xa
#     WriteReg 0x28 0x3fff
#     WriteReg 0x1c 0x80000000
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 9F, ËØ? FLASH ID
#     WriteReg 0x68 0x9f
#     # Ë¶ÅË?ªÂ°ËöÂ∞ë‰∏?Êï∞ÊçÆÂ∞±ÂÜôÂá†‰∏™ dummy Êï∞ÊçÆ
#     set num 0
#     while {$num < $byte_num} {
#         WriteReg 0x68 0x00
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# 
#     set num 0
#     set id_data "RDID is "
#     while {$num < $byte_num + 1} {
#         if {$num >= 1} {
#             append id_data [string range [ReadReg 0x6c] end-1 end]
#         } else {
#             ReadReg 0x6c
#         }
#         incr num 1
#     }
#     return $id_data
# }
# proc WREN {} {
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 06, ÂÜô‰ΩøËÉ?
#     WriteReg 0x68 0x06
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
#     return "Write Enable!"
# }
# proc SE {Sector_Num} {
#     WREN
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = d8, ÊâáÂå∫Êì¶Èô§
#     WriteReg 0x68 0xd8
#     # Write Address
#     WriteReg 0x68 $Sector_Num
#     WriteReg 0x68 0x00
#     WriteReg 0x68 0x00
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
#     return "Sector Erase Done!"
# }
# proc BE {} {
#     WREN
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = c7, Êï¥ÁâáÊì¶Èô§
#     WriteReg 0x68 0xc7
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
#     return "Bulk Erase Done!"
# }
# proc PP {address} {
#     WREN
# # ÂÖàÂÜôÂâ? 128 Byte, Âõ†‰∏∫FIFOÊ∑±Â∫¶256, ‰ΩÜÊòØcmd+Âú∞ÂùÄÂç†Áî®4Byte, ÊâÄ‰ª•ÂÆûÈôÖ‰ΩøÁî®‰∏çË∂?256ByteÂè?Áî°ß
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 02, È°µÂÜô
#     WriteReg 0x68 0x02
#     # Write Address
#     WriteReg 0x68 [expr ($address >> 16)]
#     WriteReg 0x68 [expr ($address % (2**16)) >> 8]
#     WriteReg 0x68 [expr ($address % (2**8))]
#     # Write Data
#     set num 0
#     while {$num < 128} {
#         WriteReg 0x68 $num
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# # ÂÜçÂÜôÂê? 128 Byte
#     WREN
#     set address [expr {$address + 128}]
#     puts [ format 0x%08x $address]
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 02, È°µÂÜô
#     WriteReg 0x68 0x02
#     # Write Address
#     WriteReg 0x68 [expr ($address >> 16)]
#     WriteReg 0x68 [expr ($address % (2**16)) >> 8]
#     WriteReg 0x68 [expr ($address % (2**8))]
#     # Write Data
#     while {$num < 256} {
#         WriteReg 0x68 $num
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
#     return "Page Program Done!"
# }
# proc READ {address number} {
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 03, ÊåâÂ≠óËäÇË?ªÊï∞Êç?
#     WriteReg 0x68 0x03
#     # Read Address
#     WriteReg 0x68 [expr ($address >> 16)]
#     WriteReg 0x68 [expr ($address % (2**16)) >> 8]
#     WriteReg 0x68 [expr ($address % (2**8))]
#     # Ë¶ÅË?ªÂ°ËöÂ∞ë‰∏?Êï∞ÊçÆÂ∞±ÂÜôÂá†‰∏™ dummy Êï∞ÊçÆ
#     set num 0
#     while {$num < $number} {
#         WriteReg 0x68 0x00
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# 
#     ######################## ÂÜôÊñá‰ª? ########################
#     set fn "./data.txt"
#     set fid [open $fn w+]
#     set num 0
#     puts $fid "Number   Address   Data"
#     while {$num < $number + 4} {
#         if {$num >= 4} {
#             puts $fid [format "%8d %#08x 0x%s" [expr {$num-3}] [expr {$address + $num - 3}] [string range [ReadReg 0x6c] end-1 end]]
#         } else {
#             ReadReg 0x6c
#         }
#         incr num 1
#     }
#     close $fid
#     puts "Read Done!"
#     # set num 0
#     # set read_data "ReadData is "
#     # while {$num < $number + 4} {
#     #     if {$num >= 4} {
#     #         append read_data [string range [ReadReg 0x6c] end-1 end]
#     #     } else {
#     #         ReadReg 0x6c
#     #     }
#     #     incr num 1
#     # }
#     # return $read_data
# }
READ 0x100 128
Read Done!
source C:/Users/hjh09/Desktop/project/spi_test/tcl/flash_test.tcl
# proc RDID {byte_num} {
#     WriteReg 0x40 0xa
#     WriteReg 0x28 0x3fff
#     WriteReg 0x1c 0x80000000
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 9F, ËØ? FLASH ID
#     WriteReg 0x68 0x9f
#     # Ë¶ÅË?ªÂ°ËöÂ∞ë‰∏?Êï∞ÊçÆÂ∞±ÂÜôÂá†‰∏™ dummy Êï∞ÊçÆ
#     set num 0
#     while {$num < $byte_num} {
#         WriteReg 0x68 0x00
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# 
#     set num 0
#     set id_data "RDID is "
#     while {$num < $byte_num + 1} {
#         if {$num >= 1} {
#             append id_data [string range [ReadReg 0x6c] end-1 end]
#         } else {
#             ReadReg 0x6c
#         }
#         incr num 1
#     }
#     return $id_data
# }
# proc WREN {} {
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 06, ÂÜô‰ΩøËÉ?
#     WriteReg 0x68 0x06
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
#     return "Write Enable!"
# }
# proc SE {Sector_Num} {
#     WREN
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = d8, ÊâáÂå∫Êì¶Èô§
#     WriteReg 0x68 0xd8
#     # Write Address
#     WriteReg 0x68 $Sector_Num
#     WriteReg 0x68 0x00
#     WriteReg 0x68 0x00
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
#     return "Sector Erase Done!"
# }
# proc BE {} {
#     WREN
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = c7, Êï¥ÁâáÊì¶Èô§
#     WriteReg 0x68 0xc7
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
#     return "Bulk Erase Done!"
# }
# proc PP {address} {
#     WREN
# # ÂÖàÂÜôÂâ? 128 Byte, Âõ†‰∏∫FIFOÊ∑±Â∫¶256, ‰ΩÜÊòØcmd+Âú∞ÂùÄÂç†Áî®4Byte, ÊâÄ‰ª•ÂÆûÈôÖ‰ΩøÁî®‰∏çË∂?256ByteÂè?Áî°ß
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 02, È°µÂÜô
#     WriteReg 0x68 0x02
#     # Write Address
#     WriteReg 0x68 [expr ($address >> 16)]
#     WriteReg 0x68 [expr ($address % (2**16)) >> 8]
#     WriteReg 0x68 [expr ($address % (2**8))]
#     # Write Data
#     set num 0
#     while {$num < 128} {
#         WriteReg 0x68 $num
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# # ÂÜçÂÜôÂê? 128 Byte
#     WREN
#     set address [expr {$address + 128}]
#     puts [ format 0x%08x $address]
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 02, È°µÂÜô
#     WriteReg 0x68 0x02
#     # Write Address
#     WriteReg 0x68 [expr ($address >> 16)]
#     WriteReg 0x68 [expr ($address % (2**16)) >> 8]
#     WriteReg 0x68 [expr ($address % (2**8))]
#     # Write Data
#     while {$num < 256} {
#         WriteReg 0x68 $num
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
#     return "Page Program Done!"
# }
# proc READ {address number} {
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 03, ÊåâÂ≠óËäÇË?ªÊï∞Êç?
#     WriteReg 0x68 0x03
#     # Read Address
#     WriteReg 0x68 [expr ($address >> 16)]
#     WriteReg 0x68 [expr ($address % (2**16)) >> 8]
#     WriteReg 0x68 [expr ($address % (2**8))]
#     # Ë¶ÅË?ªÂ°ËöÂ∞ë‰∏?Êï∞ÊçÆÂ∞±ÂÜôÂá†‰∏™ dummy Êï∞ÊçÆ
#     set num 0
#     while {$num < $number} {
#         WriteReg 0x68 0x00
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# 
#     ######################## ÂÜôÊñá‰ª? ########################
#     set fn "./data.txt"
#     set fid [open $fn w+]
#     set num 0
#     puts $fid "Number   Address   Data"
#     while {$num < $number + 4} {
#         if {$num >= 4} {
#             puts $fid [format "%-8d %#0-8x 0x%-s" [expr {$num-3}] [expr {$address + $num - 3}] [string range [ReadReg 0x6c] end-1 end]]
#         } else {
#             ReadReg 0x6c
#         }
#         incr num 1
#     }
#     close $fid
#     puts "Read Done!"
#     # set num 0
#     # set read_data "ReadData is "
#     # while {$num < $number + 4} {
#     #     if {$num >= 4} {
#     #         append read_data [string range [ReadReg 0x6c] end-1 end]
#     #     } else {
#     #         ReadReg 0x6c
#     #     }
#     #     incr num 1
#     # }
#     # return $read_data
# }
READ 0x100 128
Read Done!
source C:/Users/hjh09/Desktop/project/spi_test/tcl/flash_test.tcl
# proc RDID {byte_num} {
#     WriteReg 0x40 0xa
#     WriteReg 0x28 0x3fff
#     WriteReg 0x1c 0x80000000
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 9F, ËØ? FLASH ID
#     WriteReg 0x68 0x9f
#     # Ë¶ÅË?ªÂ°ËöÂ∞ë‰∏?Êï∞ÊçÆÂ∞±ÂÜôÂá†‰∏™ dummy Êï∞ÊçÆ
#     set num 0
#     while {$num < $byte_num} {
#         WriteReg 0x68 0x00
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# 
#     set num 0
#     set id_data "RDID is "
#     while {$num < $byte_num + 1} {
#         if {$num >= 1} {
#             append id_data [string range [ReadReg 0x6c] end-1 end]
#         } else {
#             ReadReg 0x6c
#         }
#         incr num 1
#     }
#     return $id_data
# }
# proc WREN {} {
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 06, ÂÜô‰ΩøËÉ?
#     WriteReg 0x68 0x06
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
#     return "Write Enable!"
# }
# proc SE {Sector_Num} {
#     WREN
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = d8, ÊâáÂå∫Êì¶Èô§
#     WriteReg 0x68 0xd8
#     # Write Address
#     WriteReg 0x68 $Sector_Num
#     WriteReg 0x68 0x00
#     WriteReg 0x68 0x00
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
#     return "Sector Erase Done!"
# }
# proc BE {} {
#     WREN
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = c7, Êï¥ÁâáÊì¶Èô§
#     WriteReg 0x68 0xc7
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
#     return "Bulk Erase Done!"
# }
# proc PP {address} {
#     WREN
# # ÂÖàÂÜôÂâ? 128 Byte, Âõ†‰∏∫FIFOÊ∑±Â∫¶256, ‰ΩÜÊòØcmd+Âú∞ÂùÄÂç†Áî®4Byte, ÊâÄ‰ª•ÂÆûÈôÖ‰ΩøÁî®‰∏çË∂?256ByteÂè?Áî°ß
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 02, È°µÂÜô
#     WriteReg 0x68 0x02
#     # Write Address
#     WriteReg 0x68 [expr ($address >> 16)]
#     WriteReg 0x68 [expr ($address % (2**16)) >> 8]
#     WriteReg 0x68 [expr ($address % (2**8))]
#     # Write Data
#     set num 0
#     while {$num < 128} {
#         WriteReg 0x68 $num
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# # ÂÜçÂÜôÂê? 128 Byte
#     WREN
#     set address [expr {$address + 128}]
#     puts [ format 0x%08x $address]
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 02, È°µÂÜô
#     WriteReg 0x68 0x02
#     # Write Address
#     WriteReg 0x68 [expr ($address >> 16)]
#     WriteReg 0x68 [expr ($address % (2**16)) >> 8]
#     WriteReg 0x68 [expr ($address % (2**8))]
#     # Write Data
#     while {$num < 256} {
#         WriteReg 0x68 $num
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
#     return "Page Program Done!"
# }
# proc READ {address number} {
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 03, ÊåâÂ≠óËäÇË?ªÊï∞Êç?
#     WriteReg 0x68 0x03
#     # Read Address
#     WriteReg 0x68 [expr ($address >> 16)]
#     WriteReg 0x68 [expr ($address % (2**16)) >> 8]
#     WriteReg 0x68 [expr ($address % (2**8))]
#     # Ë¶ÅË?ªÂ°ËöÂ∞ë‰∏?Êï∞ÊçÆÂ∞±ÂÜôÂá†‰∏™ dummy Êï∞ÊçÆ
#     set num 0
#     while {$num < $number} {
#         WriteReg 0x68 0x00
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# 
#     ######################## ÂÜôÊñá‰ª? ########################
#     set fn "./data.txt"
#     set fid [open $fn w+]
#     set num 0
#     puts $fid "Number   Address   Data"
#     while {$num < $number + 4} {
#         if {$num >= 4} {
#             puts $fid [format "%8d     %#08x     0x%s" [expr {$num-3}] [expr {$address + $num - 3}] [string range [ReadReg 0x6c] end-1 end]]
#         } else {
#             ReadReg 0x6c
#         }
#         incr num 1
#     }
#     close $fid
#     puts "Read Done!"
#     # set num 0
#     # set read_data "ReadData is "
#     # while {$num < $number + 4} {
#     #     if {$num >= 4} {
#     #         append read_data [string range [ReadReg 0x6c] end-1 end]
#     #     } else {
#     #         ReadReg 0x6c
#     #     }
#     #     incr num 1
#     # }
#     # return $read_data
# }
READ 0x100 128
Read Done!
source C:/Users/hjh09/Desktop/project/spi_test/tcl/flash_test.tcl
# proc RDID {byte_num} {
#     WriteReg 0x40 0xa
#     WriteReg 0x28 0x3fff
#     WriteReg 0x1c 0x80000000
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 9F, ËØ? FLASH ID
#     WriteReg 0x68 0x9f
#     # Ë¶ÅË?ªÂ°ËöÂ∞ë‰∏?Êï∞ÊçÆÂ∞±ÂÜôÂá†‰∏™ dummy Êï∞ÊçÆ
#     set num 0
#     while {$num < $byte_num} {
#         WriteReg 0x68 0x00
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# 
#     set num 0
#     set id_data "RDID is "
#     while {$num < $byte_num + 1} {
#         if {$num >= 1} {
#             append id_data [string range [ReadReg 0x6c] end-1 end]
#         } else {
#             ReadReg 0x6c
#         }
#         incr num 1
#     }
#     return $id_data
# }
# proc WREN {} {
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 06, ÂÜô‰ΩøËÉ?
#     WriteReg 0x68 0x06
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
#     return "Write Enable!"
# }
# proc SE {Sector_Num} {
#     WREN
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = d8, ÊâáÂå∫Êì¶Èô§
#     WriteReg 0x68 0xd8
#     # Write Address
#     WriteReg 0x68 $Sector_Num
#     WriteReg 0x68 0x00
#     WriteReg 0x68 0x00
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
#     return "Sector Erase Done!"
# }
# proc BE {} {
#     WREN
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = c7, Êï¥ÁâáÊì¶Èô§
#     WriteReg 0x68 0xc7
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
#     return "Bulk Erase Done!"
# }
# proc PP {address} {
#     WREN
# # ÂÖàÂÜôÂâ? 128 Byte, Âõ†‰∏∫FIFOÊ∑±Â∫¶256, ‰ΩÜÊòØcmd+Âú∞ÂùÄÂç†Áî®4Byte, ÊâÄ‰ª•ÂÆûÈôÖ‰ΩøÁî®‰∏çË∂?256ByteÂè?Áî°ß
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 02, È°µÂÜô
#     WriteReg 0x68 0x02
#     # Write Address
#     WriteReg 0x68 [expr ($address >> 16)]
#     WriteReg 0x68 [expr ($address % (2**16)) >> 8]
#     WriteReg 0x68 [expr ($address % (2**8))]
#     # Write Data
#     set num 0
#     while {$num < 128} {
#         WriteReg 0x68 $num
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# # ÂÜçÂÜôÂê? 128 Byte
#     WREN
#     set address [expr {$address + 128}]
#     puts [ format 0x%08x $address]
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 02, È°µÂÜô
#     WriteReg 0x68 0x02
#     # Write Address
#     WriteReg 0x68 [expr ($address >> 16)]
#     WriteReg 0x68 [expr ($address % (2**16)) >> 8]
#     WriteReg 0x68 [expr ($address % (2**8))]
#     # Write Data
#     while {$num < 256} {
#         WriteReg 0x68 $num
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
#     return "Page Program Done!"
# }
# proc READ {address number} {
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 03, ÊåâÂ≠óËäÇË?ªÊï∞Êç?
#     WriteReg 0x68 0x03
#     # Read Address
#     WriteReg 0x68 [expr ($address >> 16)]
#     WriteReg 0x68 [expr ($address % (2**16)) >> 8]
#     WriteReg 0x68 [expr ($address % (2**8))]
#     # Ë¶ÅË?ªÂ°ËöÂ∞ë‰∏?Êï∞ÊçÆÂ∞±ÂÜôÂá†‰∏™ dummy Êï∞ÊçÆ
#     set num 0
#     while {$num < $number} {
#         WriteReg 0x68 0x00
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# 
#     ######################## ÂÜôÊñá‰ª? ########################
#     set fn "./data.txt"
#     set fid [open $fn w+]
#     set num 0
#     puts $fid "Number       Address       Data"
#     while {$num < $number + 4} {
#         if {$num >= 4} {
#             puts $fid [format "%8d         %#8x         0x%s" [expr {$num-3}] [expr {$address + $num - 3}] [string range [ReadReg 0x6c] end-1 end]]
#         } else {
#             ReadReg 0x6c
#         }
#         incr num 1
#     }
#     close $fid
#     puts "Read Done!"
#     # set num 0
#     # set read_data "ReadData is "
#     # while {$num < $number + 4} {
#     #     if {$num >= 4} {
#     #         append read_data [string range [ReadReg 0x6c] end-1 end]
#     #     } else {
#     #         ReadReg 0x6c
#     #     }
#     #     incr num 1
#     # }
#     # return $read_data
# }
READ 0x100 128
Read Done!
source C:/Users/hjh09/Desktop/project/spi_test/tcl/flash_test.tcl
# proc RDID {byte_num} {
#     WriteReg 0x40 0xa
#     WriteReg 0x28 0x3fff
#     WriteReg 0x1c 0x80000000
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 9F, ËØ? FLASH ID
#     WriteReg 0x68 0x9f
#     # Ë¶ÅË?ªÂ°ËöÂ∞ë‰∏?Êï∞ÊçÆÂ∞±ÂÜôÂá†‰∏™ dummy Êï∞ÊçÆ
#     set num 0
#     while {$num < $byte_num} {
#         WriteReg 0x68 0x00
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# 
#     set num 0
#     set id_data "RDID is "
#     while {$num < $byte_num + 1} {
#         if {$num >= 1} {
#             append id_data [string range [ReadReg 0x6c] end-1 end]
#         } else {
#             ReadReg 0x6c
#         }
#         incr num 1
#     }
#     return $id_data
# }
# proc WREN {} {
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 06, ÂÜô‰ΩøËÉ?
#     WriteReg 0x68 0x06
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
#     return "Write Enable!"
# }
# proc SE {Sector_Num} {
#     WREN
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = d8, ÊâáÂå∫Êì¶Èô§
#     WriteReg 0x68 0xd8
#     # Write Address
#     WriteReg 0x68 $Sector_Num
#     WriteReg 0x68 0x00
#     WriteReg 0x68 0x00
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
#     return "Sector Erase Done!"
# }
# proc BE {} {
#     WREN
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = c7, Êï¥ÁâáÊì¶Èô§
#     WriteReg 0x68 0xc7
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
#     return "Bulk Erase Done!"
# }
# proc PP {address} {
#     WREN
# # ÂÖàÂÜôÂâ? 128 Byte, Âõ†‰∏∫FIFOÊ∑±Â∫¶256, ‰ΩÜÊòØcmd+Âú∞ÂùÄÂç†Áî®4Byte, ÊâÄ‰ª•ÂÆûÈôÖ‰ΩøÁî®‰∏çË∂?256ByteÂè?Áî°ß
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 02, È°µÂÜô
#     WriteReg 0x68 0x02
#     # Write Address
#     WriteReg 0x68 [expr ($address >> 16)]
#     WriteReg 0x68 [expr ($address % (2**16)) >> 8]
#     WriteReg 0x68 [expr ($address % (2**8))]
#     # Write Data
#     set num 0
#     while {$num < 128} {
#         WriteReg 0x68 $num
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# # ÂÜçÂÜôÂê? 128 Byte
#     WREN
#     set address [expr {$address + 128}]
#     puts [ format 0x%08x $address]
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 02, È°µÂÜô
#     WriteReg 0x68 0x02
#     # Write Address
#     WriteReg 0x68 [expr ($address >> 16)]
#     WriteReg 0x68 [expr ($address % (2**16)) >> 8]
#     WriteReg 0x68 [expr ($address % (2**8))]
#     # Write Data
#     while {$num < 256} {
#         WriteReg 0x68 $num
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
#     return "Page Program Done!"
# }
# proc READ {address number} {
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 03, ÊåâÂ≠óËäÇË?ªÊï∞Êç?
#     WriteReg 0x68 0x03
#     # Read Address
#     WriteReg 0x68 [expr ($address >> 16)]
#     WriteReg 0x68 [expr ($address % (2**16)) >> 8]
#     WriteReg 0x68 [expr ($address % (2**8))]
#     # Ë¶ÅË?ªÂ°ËöÂ∞ë‰∏?Êï∞ÊçÆÂ∞±ÂÜôÂá†‰∏™ dummy Êï∞ÊçÆ
#     set num 0
#     while {$num < $number} {
#         WriteReg 0x68 0x00
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# 
#     ######################## ÂÜôÊñá‰ª? ########################
#     set fn "./data.txt"
#     set fid [open $fn w+]
#     set num 0
#     puts $fid "Number       Address       Data"
#     while {$num < $number + 4} {
#         if {$num >= 4} {
#             puts $fid [format "%-8d         %#-8x         0x%s" [expr {$num-3}] [expr {$address + $num - 3}] [string range [ReadReg 0x6c] end-1 end]]
#         } else {
#             ReadReg 0x6c
#         }
#         incr num 1
#     }
#     close $fid
#     puts "Read Done!"
#     # set num 0
#     # set read_data "ReadData is "
#     # while {$num < $number + 4} {
#     #     if {$num >= 4} {
#     #         append read_data [string range [ReadReg 0x6c] end-1 end]
#     #     } else {
#     #         ReadReg 0x6c
#     #     }
#     #     incr num 1
#     # }
#     # return $read_data
# }
READ 0x100 128
Read Done!
source C:/Users/hjh09/Desktop/project/spi_test/tcl/flash_test.tcl
# proc RDID {byte_num} {
#     WriteReg 0x40 0xa
#     WriteReg 0x28 0x3fff
#     WriteReg 0x1c 0x80000000
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 9F, ËØ? FLASH ID
#     WriteReg 0x68 0x9f
#     # Ë¶ÅË?ªÂ°ËöÂ∞ë‰∏?Êï∞ÊçÆÂ∞±ÂÜôÂá†‰∏™ dummy Êï∞ÊçÆ
#     set num 0
#     while {$num < $byte_num} {
#         WriteReg 0x68 0x00
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# 
#     set num 0
#     set id_data "RDID is "
#     while {$num < $byte_num + 1} {
#         if {$num >= 1} {
#             append id_data [string range [ReadReg 0x6c] end-1 end]
#         } else {
#             ReadReg 0x6c
#         }
#         incr num 1
#     }
#     return $id_data
# }
# proc WREN {} {
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 06, ÂÜô‰ΩøËÉ?
#     WriteReg 0x68 0x06
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
#     return "Write Enable!"
# }
# proc SE {Sector_Num} {
#     WREN
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = d8, ÊâáÂå∫Êì¶Èô§
#     WriteReg 0x68 0xd8
#     # Write Address
#     WriteReg 0x68 $Sector_Num
#     WriteReg 0x68 0x00
#     WriteReg 0x68 0x00
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
#     return "Sector Erase Done!"
# }
# proc BE {} {
#     WREN
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = c7, Êï¥ÁâáÊì¶Èô§
#     WriteReg 0x68 0xc7
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
#     return "Bulk Erase Done!"
# }
# proc PP {address} {
#     WREN
# # ÂÖàÂÜôÂâ? 128 Byte, Âõ†‰∏∫FIFOÊ∑±Â∫¶256, ‰ΩÜÊòØcmd+Âú∞ÂùÄÂç†Áî®4Byte, ÊâÄ‰ª•ÂÆûÈôÖ‰ΩøÁî®‰∏çË∂?256ByteÂè?Áî°ß
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 02, È°µÂÜô
#     WriteReg 0x68 0x02
#     # Write Address
#     WriteReg 0x68 [expr ($address >> 16)]
#     WriteReg 0x68 [expr ($address % (2**16)) >> 8]
#     WriteReg 0x68 [expr ($address % (2**8))]
#     # Write Data
#     set num 0
#     while {$num < 128} {
#         WriteReg 0x68 $num
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# # ÂÜçÂÜôÂê? 128 Byte
#     WREN
#     set address [expr {$address + 128}]
#     puts [ format 0x%08x $address]
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 02, È°µÂÜô
#     WriteReg 0x68 0x02
#     # Write Address
#     WriteReg 0x68 [expr ($address >> 16)]
#     WriteReg 0x68 [expr ($address % (2**16)) >> 8]
#     WriteReg 0x68 [expr ($address % (2**8))]
#     # Write Data
#     while {$num < 256} {
#         WriteReg 0x68 $num
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
#     return "Page Program Done!"
# }
# proc READ {address number} {
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 03, ÊåâÂ≠óËäÇË?ªÊï∞Êç?
#     WriteReg 0x68 0x03
#     # Read Address
#     WriteReg 0x68 [expr ($address >> 16)]
#     WriteReg 0x68 [expr ($address % (2**16)) >> 8]
#     WriteReg 0x68 [expr ($address % (2**8))]
#     # Ë¶ÅË?ªÂ°ËöÂ∞ë‰∏?Êï∞ÊçÆÂ∞±ÂÜôÂá†‰∏™ dummy Êï∞ÊçÆ
#     set num 0
#     while {$num < $number} {
#         WriteReg 0x68 0x00
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# 
#     ######################## ÂÜôÊñá‰ª? ########################
#     set fn "./data.txt"
#     set fid [open $fn w+]
#     set num 0
#     puts $fid "Number       Address       Data"
#     while {$num < $number + 4} {
#         if {$num >= 4} {
#             puts $fid [format "%8d         %#8x         0x%s" [expr {$num-3}] [expr {$address + $num - 3}] [string range [ReadReg 0x6c] end-1 end]]
#         } else {
#             ReadReg 0x6c
#         }
#         incr num 1
#     }
#     while {[eof $fid] != 1} {
#         gets $fid line
#         puts $line
#     }
#     close $fid
#     puts "Read Done!"
#     # set num 0
#     # set read_data "ReadData is "
#     # while {$num < $number + 4} {
#     #     if {$num >= 4} {
#     #         append read_data [string range [ReadReg 0x6c] end-1 end]
#     #     } else {
#     #         ReadReg 0x6c
#     #     }
#     #     incr num 1
#     # }
#     # return $read_data
# }
READ 0x100 128

Read Done!
source C:/Users/hjh09/Desktop/project/spi_test/tcl/flash_test.tcl
# proc RDID {byte_num} {
#     WriteReg 0x40 0xa
#     WriteReg 0x28 0x3fff
#     WriteReg 0x1c 0x80000000
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 9F, ËØ? FLASH ID
#     WriteReg 0x68 0x9f
#     # Ë¶ÅË?ªÂ°ËöÂ∞ë‰∏?Êï∞ÊçÆÂ∞±ÂÜôÂá†‰∏™ dummy Êï∞ÊçÆ
#     set num 0
#     while {$num < $byte_num} {
#         WriteReg 0x68 0x00
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# 
#     set num 0
#     set id_data "RDID is "
#     while {$num < $byte_num + 1} {
#         if {$num >= 1} {
#             append id_data [string range [ReadReg 0x6c] end-1 end]
#         } else {
#             ReadReg 0x6c
#         }
#         incr num 1
#     }
#     return $id_data
# }
# proc WREN {} {
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 06, ÂÜô‰ΩøËÉ?
#     WriteReg 0x68 0x06
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
#     return "Write Enable!"
# }
# proc SE {Sector_Num} {
#     WREN
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = d8, ÊâáÂå∫Êì¶Èô§
#     WriteReg 0x68 0xd8
#     # Write Address
#     WriteReg 0x68 $Sector_Num
#     WriteReg 0x68 0x00
#     WriteReg 0x68 0x00
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
#     return "Sector Erase Done!"
# }
# proc BE {} {
#     WREN
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = c7, Êï¥ÁâáÊì¶Èô§
#     WriteReg 0x68 0xc7
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
#     return "Bulk Erase Done!"
# }
# proc PP {address} {
#     WREN
# # ÂÖàÂÜôÂâ? 128 Byte, Âõ†‰∏∫FIFOÊ∑±Â∫¶256, ‰ΩÜÊòØcmd+Âú∞ÂùÄÂç†Áî®4Byte, ÊâÄ‰ª•ÂÆûÈôÖ‰ΩøÁî®‰∏çË∂?256ByteÂè?Áî°ß
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 02, È°µÂÜô
#     WriteReg 0x68 0x02
#     # Write Address
#     WriteReg 0x68 [expr ($address >> 16)]
#     WriteReg 0x68 [expr ($address % (2**16)) >> 8]
#     WriteReg 0x68 [expr ($address % (2**8))]
#     # Write Data
#     set num 0
#     while {$num < 128} {
#         WriteReg 0x68 $num
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# # ÂÜçÂÜôÂê? 128 Byte
#     WREN
#     set address [expr {$address + 128}]
#     puts [ format 0x%08x $address]
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 02, È°µÂÜô
#     WriteReg 0x68 0x02
#     # Write Address
#     WriteReg 0x68 [expr ($address >> 16)]
#     WriteReg 0x68 [expr ($address % (2**16)) >> 8]
#     WriteReg 0x68 [expr ($address % (2**8))]
#     # Write Data
#     while {$num < 256} {
#         WriteReg 0x68 $num
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
#     return "Page Program Done!"
# }
# proc READ {address number} {
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 03, ÊåâÂ≠óËäÇË?ªÊï∞Êç?
#     WriteReg 0x68 0x03
#     # Read Address
#     WriteReg 0x68 [expr ($address >> 16)]
#     WriteReg 0x68 [expr ($address % (2**16)) >> 8]
#     WriteReg 0x68 [expr ($address % (2**8))]
#     # Ë¶ÅË?ªÂ°ËöÂ∞ë‰∏?Êï∞ÊçÆÂ∞±ÂÜôÂá†‰∏™ dummy Êï∞ÊçÆ
#     set num 0
#     while {$num < $number} {
#         WriteReg 0x68 0x00
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# 
#     ######################## ÂÜôÊñá‰ª? ########################
#     set fn "./data.txt"
#     set fid [open $fn w+]
#     set num 0
#     puts $fid "Number       Address       Data"
#     while {$num < $number + 4} {
#         if {$num >= 4} {
#             puts $fid [format "%8d         %#8x         0x%s" [expr {$num-3}] [expr {$address + $num - 3}] [string range [ReadReg 0x6c] end-1 end]]
#         } else {
#             ReadReg 0x6c
#         }
#         incr num 1
#     }
#     close $fid
#     ######################## ËØªÊñá‰ª∂Âà∞ÂèòÈáè line ########################
#     # ÂëΩ‰ª§eof, ‰∏ÄÊó¶Ë?ªÂèñÂà∞Êñá‰ª∂Êú´Â∞?, ËØ•ÂëΩ‰ª§Â∞±ËøîÂõû 1
#     set fid [open $fn r+]
#     while {[eof $fid] != 1} {
#         gets $fid line
#         puts $line
#     }
#     close $fid
#     puts "Read Done!"
#     # set num 0
#     # set read_data "ReadData is "
#     # while {$num < $number + 4} {
#     #     if {$num >= 4} {
#     #         append read_data [string range [ReadReg 0x6c] end-1 end]
#     #     } else {
#     #         ReadReg 0x6c
#     #     }
#     #     incr num 1
#     # }
#     # return $read_data
# }
READ 0x100 128
Number       Address       Data
       1            0x101         0x00
       2            0x102         0x01
       3            0x103         0x02
       4            0x104         0x03
       5            0x105         0x04
       6            0x106         0x05
       7            0x107         0x06
       8            0x108         0x07
       9            0x109         0x08
      10            0x10a         0x09
      11            0x10b         0x0a
      12            0x10c         0x0b
      13            0x10d         0x0c
      14            0x10e         0x0d
      15            0x10f         0x0e
      16            0x110         0x0f
      17            0x111         0x10
      18            0x112         0x11
      19            0x113         0x12
      20            0x114         0x13
      21            0x115         0x14
      22            0x116         0x15
      23            0x117         0x16
      24            0x118         0x17
      25            0x119         0x18
      26            0x11a         0x19
      27            0x11b         0x1a
      28            0x11c         0x1b
      29            0x11d         0x1c
      30            0x11e         0x1d
      31            0x11f         0x1e
      32            0x120         0x1f
      33            0x121         0x20
      34            0x122         0x21
      35            0x123         0x22
      36            0x124         0x23
      37            0x125         0x24
      38            0x126         0x25
      39            0x127         0x26
      40            0x128         0x27
      41            0x129         0x28
      42            0x12a         0x29
      43            0x12b         0x2a
      44            0x12c         0x2b
      45            0x12d         0x2c
      46            0x12e         0x2d
      47            0x12f         0x2e
      48            0x130         0x2f
      49            0x131         0x30
      50            0x132         0x31
      51            0x133         0x32
      52            0x134         0x33
      53            0x135         0x34
      54            0x136         0x35
      55            0x137         0x36
      56            0x138         0x37
      57            0x139         0x38
      58            0x13a         0x39
      59            0x13b         0x3a
      60            0x13c         0x3b
      61            0x13d         0x3c
      62            0x13e         0x3d
      63            0x13f         0x3e
      64            0x140         0x3f
      65            0x141         0x40
      66            0x142         0x41
      67            0x143         0x42
      68            0x144         0x43
      69            0x145         0x44
      70            0x146         0x45
      71            0x147         0x46
      72            0x148         0x47
      73            0x149         0x48
      74            0x14a         0x49
      75            0x14b         0x4a
      76            0x14c         0x4b
      77            0x14d         0x4c
      78            0x14e         0x4d
      79            0x14f         0x4e
      80            0x150         0x4f
      81            0x151         0x50
      82            0x152         0x51
      83            0x153         0x52
      84            0x154         0x53
      85            0x155         0x54
      86            0x156         0x55
      87            0x157         0x56
      88            0x158         0x57
      89            0x159         0x58
      90            0x15a         0x59
      91            0x15b         0x5a
      92            0x15c         0x5b
      93            0x15d         0x5c
      94            0x15e         0x5d
      95            0x15f         0x5e
      96            0x160         0x5f
      97            0x161         0x60
      98            0x162         0x61
      99            0x163         0x62
     100            0x164         0x63
     101            0x165         0x64
     102            0x166         0x65
     103            0x167         0x66
     104            0x168         0x67
     105            0x169         0x68
     106            0x16a         0x69
     107            0x16b         0x6a
     108            0x16c         0x6b
     109            0x16d         0x6c
     110            0x16e         0x6d
     111            0x16f         0x6e
     112            0x170         0x6f
     113            0x171         0x70
     114            0x172         0x71
     115            0x173         0x72
     116            0x174         0x73
     117            0x175         0x74
     118            0x176         0x75
     119            0x177         0x76
     120            0x178         0x77
     121            0x179         0x78
     122            0x17a         0x79
     123            0x17b         0x7a
     124            0x17c         0x7b
     125            0x17d         0x7c
     126            0x17e         0x7d
     127            0x17f         0x7e
     128            0x180         0x7f

Read Done!
source C:/Users/hjh09/Desktop/project/spi_test/tcl/flash_test.tcl
# proc RDID {byte_num} {
#     WriteReg 0x40 0xa
#     WriteReg 0x28 0x3fff
#     WriteReg 0x1c 0x80000000
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 9F, ËØ? FLASH ID
#     WriteReg 0x68 0x9f
#     # Ë¶ÅË?ªÂ°ËöÂ∞ë‰∏?Êï∞ÊçÆÂ∞±ÂÜôÂá†‰∏™ dummy Êï∞ÊçÆ
#     set num 0
#     while {$num < $byte_num} {
#         WriteReg 0x68 0x00
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# 
#     set num 0
#     set id_data "RDID is "
#     while {$num < $byte_num + 1} {
#         if {$num >= 1} {
#             append id_data [string range [ReadReg 0x6c] end-1 end]
#         } else {
#             ReadReg 0x6c
#         }
#         incr num 1
#     }
#     return $id_data
# }
# proc WREN {} {
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 06, ÂÜô‰ΩøËÉ?
#     WriteReg 0x68 0x06
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
#     return "Write Enable!"
# }
# proc SE {Sector_Num} {
#     WREN
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = d8, ÊâáÂå∫Êì¶Èô§
#     WriteReg 0x68 0xd8
#     # Write Address
#     WriteReg 0x68 $Sector_Num
#     WriteReg 0x68 0x00
#     WriteReg 0x68 0x00
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
#     return "Sector Erase Done!"
# }
# proc BE {} {
#     WREN
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = c7, Êï¥ÁâáÊì¶Èô§
#     WriteReg 0x68 0xc7
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
#     return "Bulk Erase Done!"
# }
# proc PP {address} {
#     WREN
# # ÂÖàÂÜôÂâ? 128 Byte, Âõ†‰∏∫FIFOÊ∑±Â∫¶256, ‰ΩÜÊòØcmd+Âú∞ÂùÄÂç†Áî®4Byte, ÊâÄ‰ª•ÂÆûÈôÖ‰ΩøÁî®‰∏çË∂?256ByteÂè?Áî°ß
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 02, È°µÂÜô
#     WriteReg 0x68 0x02
#     # Write Address
#     WriteReg 0x68 [expr ($address >> 16)]
#     WriteReg 0x68 [expr ($address % (2**16)) >> 8]
#     WriteReg 0x68 [expr ($address % (2**8))]
#     # Write Data
#     set num 0
#     while {$num < 128} {
#         WriteReg 0x68 $num
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# # ÂÜçÂÜôÂê? 128 Byte
#     WREN
#     set address [expr {$address + 128}]
#     puts [ format 0x%08x $address]
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 02, È°µÂÜô
#     WriteReg 0x68 0x02
#     # Write Address
#     WriteReg 0x68 [expr ($address >> 16)]
#     WriteReg 0x68 [expr ($address % (2**16)) >> 8]
#     WriteReg 0x68 [expr ($address % (2**8))]
#     # Write Data
#     while {$num < 256} {
#         WriteReg 0x68 $num
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
#     return "Page Program Done!"
# }
# proc READ {address number} {
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 03, ÊåâÂ≠óËäÇË?ªÊï∞Êç?
#     WriteReg 0x68 0x03
#     # Read Address
#     WriteReg 0x68 [expr ($address >> 16)]
#     WriteReg 0x68 [expr ($address % (2**16)) >> 8]
#     WriteReg 0x68 [expr ($address % (2**8))]
#     # Ë¶ÅË?ªÂ°ËöÂ∞ë‰∏?Êï∞ÊçÆÂ∞±ÂÜôÂá†‰∏™ dummy Êï∞ÊçÆ
#     set num 0
#     while {$num < $number} {
#         WriteReg 0x68 0x00
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# 
#     ######################## ÂÜôÊñá‰ª? ########################
#     set fn "./data.txt"
#     set fid [open $fn w+]
#     set num 0
#     puts $fid "Number   Address   Data"
#     while {$num < $number + 4} {
#         if {$num >= 4} {
#             puts $fid [format "%-8d   %#-8x   0x%s" [expr {$num-3}] [expr {$address + $num - 3}] [string range [ReadReg 0x6c] end-1 end]]
#         } else {
#             ReadReg 0x6c
#         }
#         incr num 1
#     }
#     close $fid
#     ######################## ËØªÊñá‰ª∂Âà∞ÂèòÈáè line ########################
#     # ÂëΩ‰ª§eof, ‰∏ÄÊó¶Ë?ªÂèñÂà∞Êñá‰ª∂Êú´Â∞?, ËØ•ÂëΩ‰ª§Â∞±ËøîÂõû 1
#     set fid [open $fn r+]
#     while {[eof $fid] != 1} {
#         gets $fid line
#         puts $line
#     }
#     close $fid
#     puts "Read Done!"
#     # set num 0
#     # set read_data "ReadData is "
#     # while {$num < $number + 4} {
#     #     if {$num >= 4} {
#     #         append read_data [string range [ReadReg 0x6c] end-1 end]
#     #     } else {
#     #         ReadReg 0x6c
#     #     }
#     #     incr num 1
#     # }
#     # return $read_data
# }
READ 0x100 128
Number   Address   Data
1          0x101      0x00
2          0x102      0x01
3          0x103      0x02
4          0x104      0x03
5          0x105      0x04
6          0x106      0x05
7          0x107      0x06
8          0x108      0x07
9          0x109      0x08
10         0x10a      0x09
11         0x10b      0x0a
12         0x10c      0x0b
13         0x10d      0x0c
14         0x10e      0x0d
15         0x10f      0x0e
16         0x110      0x0f
17         0x111      0x10
18         0x112      0x11
19         0x113      0x12
20         0x114      0x13
21         0x115      0x14
22         0x116      0x15
23         0x117      0x16
24         0x118      0x17
25         0x119      0x18
26         0x11a      0x19
27         0x11b      0x1a
28         0x11c      0x1b
29         0x11d      0x1c
30         0x11e      0x1d
31         0x11f      0x1e
32         0x120      0x1f
33         0x121      0x20
34         0x122      0x21
35         0x123      0x22
36         0x124      0x23
37         0x125      0x24
38         0x126      0x25
39         0x127      0x26
40         0x128      0x27
41         0x129      0x28
42         0x12a      0x29
43         0x12b      0x2a
44         0x12c      0x2b
45         0x12d      0x2c
46         0x12e      0x2d
47         0x12f      0x2e
48         0x130      0x2f
49         0x131      0x30
50         0x132      0x31
51         0x133      0x32
52         0x134      0x33
53         0x135      0x34
54         0x136      0x35
55         0x137      0x36
56         0x138      0x37
57         0x139      0x38
58         0x13a      0x39
59         0x13b      0x3a
60         0x13c      0x3b
61         0x13d      0x3c
62         0x13e      0x3d
63         0x13f      0x3e
64         0x140      0x3f
65         0x141      0x40
66         0x142      0x41
67         0x143      0x42
68         0x144      0x43
69         0x145      0x44
70         0x146      0x45
71         0x147      0x46
72         0x148      0x47
73         0x149      0x48
74         0x14a      0x49
75         0x14b      0x4a
76         0x14c      0x4b
77         0x14d      0x4c
78         0x14e      0x4d
79         0x14f      0x4e
80         0x150      0x4f
81         0x151      0x50
82         0x152      0x51
83         0x153      0x52
84         0x154      0x53
85         0x155      0x54
86         0x156      0x55
87         0x157      0x56
88         0x158      0x57
89         0x159      0x58
90         0x15a      0x59
91         0x15b      0x5a
92         0x15c      0x5b
93         0x15d      0x5c
94         0x15e      0x5d
95         0x15f      0x5e
96         0x160      0x5f
97         0x161      0x60
98         0x162      0x61
99         0x163      0x62
100        0x164      0x63
101        0x165      0x64
102        0x166      0x65
103        0x167      0x66
104        0x168      0x67
105        0x169      0x68
106        0x16a      0x69
107        0x16b      0x6a
108        0x16c      0x6b
109        0x16d      0x6c
110        0x16e      0x6d
111        0x16f      0x6e
112        0x170      0x6f
113        0x171      0x70
114        0x172      0x71
115        0x173      0x72
116        0x174      0x73
117        0x175      0x74
118        0x176      0x75
119        0x177      0x76
120        0x178      0x77
121        0x179      0x78
122        0x17a      0x79
123        0x17b      0x7a
124        0x17c      0x7b
125        0x17d      0x7c
126        0x17e      0x7d
127        0x17f      0x7e
128        0x180      0x7f

Read Done!
source C:/Users/hjh09/Desktop/project/spi_test/tcl/flash_test.tcl
# proc RDID {byte_num} {
#     WriteReg 0x40 0xa
#     WriteReg 0x28 0x3fff
#     WriteReg 0x1c 0x80000000
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 9F, ËØ? FLASH ID
#     WriteReg 0x68 0x9f
#     # Ë¶ÅË?ªÂ°ËöÂ∞ë‰∏?Êï∞ÊçÆÂ∞±ÂÜôÂá†‰∏™ dummy Êï∞ÊçÆ
#     set num 0
#     while {$num < $byte_num} {
#         WriteReg 0x68 0x00
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# 
#     set num 0
#     set id_data "RDID is "
#     while {$num < $byte_num + 1} {
#         if {$num >= 1} {
#             append id_data [string range [ReadReg 0x6c] end-1 end]
#         } else {
#             ReadReg 0x6c
#         }
#         incr num 1
#     }
#     return $id_data
# }
# proc WREN {} {
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 06, ÂÜô‰ΩøËÉ?
#     WriteReg 0x68 0x06
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
#     return "Write Enable!"
# }
# proc SE {Sector_Num} {
#     WREN
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = d8, ÊâáÂå∫Êì¶Èô§
#     WriteReg 0x68 0xd8
#     # Write Address
#     WriteReg 0x68 $Sector_Num
#     WriteReg 0x68 0x00
#     WriteReg 0x68 0x00
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
#     return "Sector Erase Done!"
# }
# proc BE {} {
#     WREN
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = c7, Êï¥ÁâáÊì¶Èô§
#     WriteReg 0x68 0xc7
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
#     return "Bulk Erase Done!"
# }
# proc PP {address} {
#     WREN
# # ÂÖàÂÜôÂâ? 128 Byte, Âõ†‰∏∫FIFOÊ∑±Â∫¶256, ‰ΩÜÊòØcmd+Âú∞ÂùÄÂç†Áî®4Byte, ÊâÄ‰ª•ÂÆûÈôÖ‰ΩøÁî®‰∏çË∂?256ByteÂè?Áî°ß
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 02, È°µÂÜô
#     WriteReg 0x68 0x02
#     # Write Address
#     WriteReg 0x68 [expr ($address >> 16)]
#     WriteReg 0x68 [expr ($address % (2**16)) >> 8]
#     WriteReg 0x68 [expr ($address % (2**8))]
#     # Write Data
#     set num 0
#     while {$num < 128} {
#         WriteReg 0x68 $num
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# # ÂÜçÂÜôÂê? 128 Byte
#     WREN
#     set address [expr {$address + 128}]
#     puts [ format 0x%08x $address]
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 02, È°µÂÜô
#     WriteReg 0x68 0x02
#     # Write Address
#     WriteReg 0x68 [expr ($address >> 16)]
#     WriteReg 0x68 [expr ($address % (2**16)) >> 8]
#     WriteReg 0x68 [expr ($address % (2**8))]
#     # Write Data
#     while {$num < 256} {
#         WriteReg 0x68 $num
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
#     return "Page Program Done!"
# }
# proc READ {address number} {
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 03, ÊåâÂ≠óËäÇË?ªÊï∞Êç?
#     WriteReg 0x68 0x03
#     # Read Address
#     WriteReg 0x68 [expr ($address >> 16)]
#     WriteReg 0x68 [expr ($address % (2**16)) >> 8]
#     WriteReg 0x68 [expr ($address % (2**8))]
#     # Ë¶ÅË?ªÂ°ËöÂ∞ë‰∏?Êï∞ÊçÆÂ∞±ÂÜôÂá†‰∏™ dummy Êï∞ÊçÆ
#     set num 0
#     while {$num < $number} {
#         WriteReg 0x68 0x00
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# 
#     ######################## ÂÜôÊñá‰ª? ########################
#     set fn "./data.txt"
#     set fid [open $fn w+]
#     set num 0
#     puts $fid "Number   Address   Data"
#     while {$num < $number + 4} {
#         if {$num >= 4} {
#             puts $fid [format "%-8d.%#0-8x 0x%s" [expr {$num-3}] [expr {$address + $num - 3}] [string range [ReadReg 0x6c] end-1 end]]
#         } else {
#             ReadReg 0x6c
#         }
#         incr num 1
#     }
#     close $fid
#     ######################## ËØªÊñá‰ª∂Âà∞ÂèòÈáè line ########################
#     # ÂëΩ‰ª§eof, ‰∏ÄÊó¶Ë?ªÂèñÂà∞Êñá‰ª∂Êú´Â∞?, ËØ•ÂëΩ‰ª§Â∞±ËøîÂõû 1
#     set fid [open $fn r+]
#     while {[eof $fid] != 1} {
#         gets $fid line
#         puts $line
#     }
#     close $fid
#     puts "Read Done!"
#     # set num 0
#     # set read_data "ReadData is "
#     # while {$num < $number + 4} {
#     #     if {$num >= 4} {
#     #         append read_data [string range [ReadReg 0x6c] end-1 end]
#     #     } else {
#     #         ReadReg 0x6c
#     #     }
#     #     incr num 1
#     # }
#     # return $read_data
# }
READ 0x100 128
Number   Address   Data
1       .0x000101 0x00
2       .0x000102 0x01
3       .0x000103 0x02
4       .0x000104 0x03
5       .0x000105 0x04
6       .0x000106 0x05
7       .0x000107 0x06
8       .0x000108 0x07
9       .0x000109 0x08
10      .0x00010a 0x09
11      .0x00010b 0x0a
12      .0x00010c 0x0b
13      .0x00010d 0x0c
14      .0x00010e 0x0d
15      .0x00010f 0x0e
16      .0x000110 0x0f
17      .0x000111 0x10
18      .0x000112 0x11
19      .0x000113 0x12
20      .0x000114 0x13
21      .0x000115 0x14
22      .0x000116 0x15
23      .0x000117 0x16
24      .0x000118 0x17
25      .0x000119 0x18
26      .0x00011a 0x19
27      .0x00011b 0x1a
28      .0x00011c 0x1b
29      .0x00011d 0x1c
30      .0x00011e 0x1d
31      .0x00011f 0x1e
32      .0x000120 0x1f
33      .0x000121 0x20
34      .0x000122 0x21
35      .0x000123 0x22
36      .0x000124 0x23
37      .0x000125 0x24
38      .0x000126 0x25
39      .0x000127 0x26
40      .0x000128 0x27
41      .0x000129 0x28
42      .0x00012a 0x29
43      .0x00012b 0x2a
44      .0x00012c 0x2b
45      .0x00012d 0x2c
46      .0x00012e 0x2d
47      .0x00012f 0x2e
48      .0x000130 0x2f
49      .0x000131 0x30
50      .0x000132 0x31
51      .0x000133 0x32
52      .0x000134 0x33
53      .0x000135 0x34
54      .0x000136 0x35
55      .0x000137 0x36
56      .0x000138 0x37
57      .0x000139 0x38
58      .0x00013a 0x39
59      .0x00013b 0x3a
60      .0x00013c 0x3b
61      .0x00013d 0x3c
62      .0x00013e 0x3d
63      .0x00013f 0x3e
64      .0x000140 0x3f
65      .0x000141 0x40
66      .0x000142 0x41
67      .0x000143 0x42
68      .0x000144 0x43
69      .0x000145 0x44
70      .0x000146 0x45
71      .0x000147 0x46
72      .0x000148 0x47
73      .0x000149 0x48
74      .0x00014a 0x49
75      .0x00014b 0x4a
76      .0x00014c 0x4b
77      .0x00014d 0x4c
78      .0x00014e 0x4d
79      .0x00014f 0x4e
80      .0x000150 0x4f
81      .0x000151 0x50
82      .0x000152 0x51
83      .0x000153 0x52
84      .0x000154 0x53
85      .0x000155 0x54
86      .0x000156 0x55
87      .0x000157 0x56
88      .0x000158 0x57
89      .0x000159 0x58
90      .0x00015a 0x59
91      .0x00015b 0x5a
92      .0x00015c 0x5b
93      .0x00015d 0x5c
94      .0x00015e 0x5d
95      .0x00015f 0x5e
96      .0x000160 0x5f
97      .0x000161 0x60
98      .0x000162 0x61
99      .0x000163 0x62
100     .0x000164 0x63
101     .0x000165 0x64
102     .0x000166 0x65
103     .0x000167 0x66
104     .0x000168 0x67
105     .0x000169 0x68
106     .0x00016a 0x69
107     .0x00016b 0x6a
108     .0x00016c 0x6b
109     .0x00016d 0x6c
110     .0x00016e 0x6d
111     .0x00016f 0x6e
112     .0x000170 0x6f
113     .0x000171 0x70
114     .0x000172 0x71
115     .0x000173 0x72
116     .0x000174 0x73
117     .0x000175 0x74
118     .0x000176 0x75
119     .0x000177 0x76
120     .0x000178 0x77
121     .0x000179 0x78
122     .0x00017a 0x79
123     .0x00017b 0x7a
124     .0x00017c 0x7b
125     .0x00017d 0x7c
126     .0x00017e 0x7d
127     .0x00017f 0x7e
128     .0x000180 0x7f

Read Done!
source C:/Users/hjh09/Desktop/project/spi_test/tcl/flash_test.tcl
# proc RDID {byte_num} {
#     WriteReg 0x40 0xa
#     WriteReg 0x28 0x3fff
#     WriteReg 0x1c 0x80000000
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 9F, ËØ? FLASH ID
#     WriteReg 0x68 0x9f
#     # Ë¶ÅË?ªÂ°ËöÂ∞ë‰∏?Êï∞ÊçÆÂ∞±ÂÜôÂá†‰∏™ dummy Êï∞ÊçÆ
#     set num 0
#     while {$num < $byte_num} {
#         WriteReg 0x68 0x00
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# 
#     set num 0
#     set id_data "RDID is "
#     while {$num < $byte_num + 1} {
#         if {$num >= 1} {
#             append id_data [string range [ReadReg 0x6c] end-1 end]
#         } else {
#             ReadReg 0x6c
#         }
#         incr num 1
#     }
#     return $id_data
# }
# proc WREN {} {
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 06, ÂÜô‰ΩøËÉ?
#     WriteReg 0x68 0x06
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
#     return "Write Enable!"
# }
# proc SE {Sector_Num} {
#     WREN
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = d8, ÊâáÂå∫Êì¶Èô§
#     WriteReg 0x68 0xd8
#     # Write Address
#     WriteReg 0x68 $Sector_Num
#     WriteReg 0x68 0x00
#     WriteReg 0x68 0x00
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
#     return "Sector Erase Done!"
# }
# proc BE {} {
#     WREN
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = c7, Êï¥ÁâáÊì¶Èô§
#     WriteReg 0x68 0xc7
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
#     return "Bulk Erase Done!"
# }
# proc PP {address} {
#     WREN
# # ÂÖàÂÜôÂâ? 128 Byte, Âõ†‰∏∫FIFOÊ∑±Â∫¶256, ‰ΩÜÊòØcmd+Âú∞ÂùÄÂç†Áî®4Byte, ÊâÄ‰ª•ÂÆûÈôÖ‰ΩøÁî®‰∏çË∂?256ByteÂè?Áî°ß
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 02, È°µÂÜô
#     WriteReg 0x68 0x02
#     # Write Address
#     WriteReg 0x68 [expr ($address >> 16)]
#     WriteReg 0x68 [expr ($address % (2**16)) >> 8]
#     WriteReg 0x68 [expr ($address % (2**8))]
#     # Write Data
#     set num 0
#     while {$num < 128} {
#         WriteReg 0x68 $num
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# # ÂÜçÂÜôÂê? 128 Byte
#     WREN
#     set address [expr {$address + 128}]
#     puts [ format 0x%08x $address]
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 02, È°µÂÜô
#     WriteReg 0x68 0x02
#     # Write Address
#     WriteReg 0x68 [expr ($address >> 16)]
#     WriteReg 0x68 [expr ($address % (2**16)) >> 8]
#     WriteReg 0x68 [expr ($address % (2**8))]
#     # Write Data
#     while {$num < 256} {
#         WriteReg 0x68 $num
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
#     return "Page Program Done!"
# }
# proc READ {address number} {
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 03, ÊåâÂ≠óËäÇË?ªÊï∞Êç?
#     WriteReg 0x68 0x03
#     # Read Address
#     WriteReg 0x68 [expr ($address >> 16)]
#     WriteReg 0x68 [expr ($address % (2**16)) >> 8]
#     WriteReg 0x68 [expr ($address % (2**8))]
#     # Ë¶ÅË?ªÂ°ËöÂ∞ë‰∏?Êï∞ÊçÆÂ∞±ÂÜôÂá†‰∏™ dummy Êï∞ÊçÆ
#     set num 0
#     while {$num < $number} {
#         WriteReg 0x68 0x00
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# 
#     ######################## ÂÜôÊñá‰ª? ########################
#     set fn "./data.txt"
#     set fid [open $fn w+]
#     set num 0
#     puts $fid "Number   Address   Data"
#     while {$num < $number + 4} {
#         if {$num >= 4} {
#             puts $fid [format "%-8d %#0-8x   0x%s" [expr {$num-3}] [expr {$address + $num - 3}] [string range [ReadReg 0x6c] end-1 end]]
#         } else {
#             ReadReg 0x6c
#         }
#         incr num 1
#     }
#     close $fid
#     ######################## ËØªÊñá‰ª∂Âà∞ÂèòÈáè line ########################
#     # ÂëΩ‰ª§eof, ‰∏ÄÊó¶Ë?ªÂèñÂà∞Êñá‰ª∂Êú´Â∞?, ËØ•ÂëΩ‰ª§Â∞±ËøîÂõû 1
#     set fid [open $fn r+]
#     while {[eof $fid] != 1} {
#         gets $fid line
#         puts $line
#     }
#     close $fid
#     puts "Read Done!"
#     # set num 0
#     # set read_data "ReadData is "
#     # while {$num < $number + 4} {
#     #     if {$num >= 4} {
#     #         append read_data [string range [ReadReg 0x6c] end-1 end]
#     #     } else {
#     #         ReadReg 0x6c
#     #     }
#     #     incr num 1
#     # }
#     # return $read_data
# }
READ 0x100 128
Number   Address   Data
1        0x000101   0x00
2        0x000102   0x01
3        0x000103   0x02
4        0x000104   0x03
5        0x000105   0x04
6        0x000106   0x05
7        0x000107   0x06
8        0x000108   0x07
9        0x000109   0x08
10       0x00010a   0x09
11       0x00010b   0x0a
12       0x00010c   0x0b
13       0x00010d   0x0c
14       0x00010e   0x0d
15       0x00010f   0x0e
16       0x000110   0x0f
17       0x000111   0x10
18       0x000112   0x11
19       0x000113   0x12
20       0x000114   0x13
21       0x000115   0x14
22       0x000116   0x15
23       0x000117   0x16
24       0x000118   0x17
25       0x000119   0x18
26       0x00011a   0x19
27       0x00011b   0x1a
28       0x00011c   0x1b
29       0x00011d   0x1c
30       0x00011e   0x1d
31       0x00011f   0x1e
32       0x000120   0x1f
33       0x000121   0x20
34       0x000122   0x21
35       0x000123   0x22
36       0x000124   0x23
37       0x000125   0x24
38       0x000126   0x25
39       0x000127   0x26
40       0x000128   0x27
41       0x000129   0x28
42       0x00012a   0x29
43       0x00012b   0x2a
44       0x00012c   0x2b
45       0x00012d   0x2c
46       0x00012e   0x2d
47       0x00012f   0x2e
48       0x000130   0x2f
49       0x000131   0x30
50       0x000132   0x31
51       0x000133   0x32
52       0x000134   0x33
53       0x000135   0x34
54       0x000136   0x35
55       0x000137   0x36
56       0x000138   0x37
57       0x000139   0x38
58       0x00013a   0x39
59       0x00013b   0x3a
60       0x00013c   0x3b
61       0x00013d   0x3c
62       0x00013e   0x3d
63       0x00013f   0x3e
64       0x000140   0x3f
65       0x000141   0x40
66       0x000142   0x41
67       0x000143   0x42
68       0x000144   0x43
69       0x000145   0x44
70       0x000146   0x45
71       0x000147   0x46
72       0x000148   0x47
73       0x000149   0x48
74       0x00014a   0x49
75       0x00014b   0x4a
76       0x00014c   0x4b
77       0x00014d   0x4c
78       0x00014e   0x4d
79       0x00014f   0x4e
80       0x000150   0x4f
81       0x000151   0x50
82       0x000152   0x51
83       0x000153   0x52
84       0x000154   0x53
85       0x000155   0x54
86       0x000156   0x55
87       0x000157   0x56
88       0x000158   0x57
89       0x000159   0x58
90       0x00015a   0x59
91       0x00015b   0x5a
92       0x00015c   0x5b
93       0x00015d   0x5c
94       0x00015e   0x5d
95       0x00015f   0x5e
96       0x000160   0x5f
97       0x000161   0x60
98       0x000162   0x61
99       0x000163   0x62
100      0x000164   0x63
101      0x000165   0x64
102      0x000166   0x65
103      0x000167   0x66
104      0x000168   0x67
105      0x000169   0x68
106      0x00016a   0x69
107      0x00016b   0x6a
108      0x00016c   0x6b
109      0x00016d   0x6c
110      0x00016e   0x6d
111      0x00016f   0x6e
112      0x000170   0x6f
113      0x000171   0x70
114      0x000172   0x71
115      0x000173   0x72
116      0x000174   0x73
117      0x000175   0x74
118      0x000176   0x75
119      0x000177   0x76
120      0x000178   0x77
121      0x000179   0x78
122      0x00017a   0x79
123      0x00017b   0x7a
124      0x00017c   0x7b
125      0x00017d   0x7c
126      0x00017e   0x7d
127      0x00017f   0x7e
128      0x000180   0x7f

Read Done!
open_bd_design {C:/Users/hjh09/Desktop/project/spi_test/prj/top.srcs/sources_1/bd/design_1/design_1.bd}
Adding component instance block -- xilinx.com:ip:axi_quad_spi:3.2 - axi_quad_spi_0
Adding component instance block -- xilinx.com:ip:jtag_axi:1.2 - jtag_axi_0
Adding component instance block -- xilinx.com:ip:clk_wiz:6.0 - clk_wiz_0
WARNING: [BD 41-1731] Type mismatch between connected pins: /clk_wiz_0/locked(undef) and /axi_quad_spi_0/s_axi_aresetn(rst)
WARNING: [BD 41-1731] Type mismatch between connected pins: /clk_wiz_0/locked(undef) and /jtag_axi_0/aresetn(rst)
Successfully read diagram <design_1> from BD file <C:/Users/hjh09/Desktop/project/spi_test/prj/top.srcs/sources_1/bd/design_1/design_1.bd>
startgroup
set_property -dict [list CONFIG.C_SPI_MODE {2} CONFIG.C_FIFO_DEPTH {256}] [get_bd_cells axi_quad_spi_0]
endgroup
save_bd_design
Wrote  : <C:\Users\hjh09\Desktop\project\spi_test\prj\top.srcs\sources_1\bd\design_1\design_1.bd> 
Wrote  : <C:/Users/hjh09/Desktop/project/spi_test/prj/top.srcs/sources_1/bd/design_1/ui/bd_1f5defd0.ui> 
reset_run synth_1
reset_run design_1_axi_quad_spi_0_0_synth_1
WARNING: [Vivado 12-1017] Problems encountered:
1. Failed to delete one or more files in run directory C:/Users/hjh09/Desktop/project/spi_test/prj/top.runs/design_1_axi_quad_spi_0_0_synth_1

launch_runs impl_1 -to_step write_bitstream -jobs 12
INFO: [xilinx.com:ip:axi_quad_spi:3.2-1] /axi_quad_spi_0 
                  ########################################################################################
                  INFO: AXI Quad SPI core's AXI Lite Clock and EXT SPI CLK are asynchronous to each other.
                  ########################################################################################
Wrote  : <C:\Users\hjh09\Desktop\project\spi_test\prj\top.srcs\sources_1\bd\design_1\design_1.bd> 
VHDL Output written to : C:/Users/hjh09/Desktop/project/spi_test/prj/top.srcs/sources_1/bd/design_1/synth/design_1.v
VHDL Output written to : C:/Users/hjh09/Desktop/project/spi_test/prj/top.srcs/sources_1/bd/design_1/sim/design_1.v
VHDL Output written to : C:/Users/hjh09/Desktop/project/spi_test/prj/top.srcs/sources_1/bd/design_1/hdl/design_1_wrapper.v
INFO: [BD 41-1029] Generation completed for the IP Integrator block axi_quad_spi_0 .
INFO: [BD 41-1029] Generation completed for the IP Integrator block jtag_axi_0 .
INFO: [BD 41-1029] Generation completed for the IP Integrator block clk_wiz_0 .
Exporting to file C:/Users/hjh09/Desktop/project/spi_test/prj/top.srcs/sources_1/bd/design_1/hw_handoff/design_1.hwh
Generated Block Design Tcl file C:/Users/hjh09/Desktop/project/spi_test/prj/top.srcs/sources_1/bd/design_1/hw_handoff/design_1_bd.tcl
Generated Hardware Definition File C:/Users/hjh09/Desktop/project/spi_test/prj/top.srcs/sources_1/bd/design_1/synth/design_1.hwdef
INFO: [IP_Flow 19-4993] Using cached IP synthesis design for IP design_1_axi_quad_spi_0_0, cache-ID = 358cf338c9b0b046; cache size = 29.858 MB.
[Sat Jun  3 18:48:05 2023] Launched synth_1...
Run output will be captured here: C:/Users/hjh09/Desktop/project/spi_test/prj/top.runs/synth_1/runme.log
[Sat Jun  3 18:48:05 2023] Launched impl_1...
Run output will be captured here: C:/Users/hjh09/Desktop/project/spi_test/prj/top.runs/impl_1/runme.log
set_property PROBES.FILE {C:/Users/hjh09/Desktop/project/spi_test/prj/top.runs/impl_1/top.ltx} [get_hw_devices xc7a35t_0]
set_property FULL_PROBES.FILE {C:/Users/hjh09/Desktop/project/spi_test/prj/top.runs/impl_1/top.ltx} [get_hw_devices xc7a35t_0]
set_property PROGRAM.FILE {C:/Users/hjh09/Desktop/project/spi_test/prj/top.runs/impl_1/top.bit} [get_hw_devices xc7a35t_0]
program_hw_devices [get_hw_devices xc7a35t_0]
INFO: [Labtools 27-3164] End of startup status: HIGH
refresh_hw_device [lindex [get_hw_devices xc7a35t_0] 0]
INFO: [Labtools 27-2302] Device xc7a35t (JTAG device index = 0) is programmed with a design that has 1 JTAG AXI core(s).
source C:/Users/hjh09/Desktop/project/spi_test/tcl/flash_test.tcl
# proc ReadReg {address} {
#     set address [format 0x%08x $address]
#     create_hw_axi_txn rd_txn [get_hw_axis hw_axi_1] -address $address -type read
#     run_hw_axi rd_txn
#     set read_value [lindex [report_hw_axi_txn rd_txn] 1]
#     delete_hw_axi_txn rd_txn
#     return $read_value
# }
# proc WriteReg {address data} {
#     set address [format 0x%08x $address]
#     set data [format 0x%08x $data]
#     create_hw_axi_txn wr_txn [get_hw_axis hw_axi_1] -type write -address $address -data $data
#     run_hw_axi wr_txn
#     set write_value [lindex [report_hw_axi_txn wr_txn] 1]
#     delete_hw_axi_txn wr_txn
#     return $write_value
# }
# proc RDID {byte_num} {
#     WriteReg 0x40 0xa
#     WriteReg 0x28 0x3fff
#     WriteReg 0x1c 0x80000000
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 9F, ËØ? FLASH ID
#     WriteReg 0x68 0x9f
#     # Ë¶ÅË?ªÂ°ËöÂ∞ë‰∏?Êï∞ÊçÆÂ∞±ÂÜôÂá†‰∏™ dummy Êï∞ÊçÆ
#     set num 0
#     while {$num < $byte_num} {
#         WriteReg 0x68 0x00
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# 
#     set num 0
#     set id_data "RDID is "
#     while {$num < $byte_num + 1} {
#         if {$num >= 1} {
#             append id_data [string range [ReadReg 0x6c] end-1 end]
#         } else {
#             ReadReg 0x6c
#         }
#         incr num 1
#     }
#     return $id_data
# }
# proc WREN {} {
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 06, ÂÜô‰ΩøËÉ?
#     WriteReg 0x68 0x06
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
#     return "Write Enable!"
# }
# proc SE {Sector_Num} {
#     WREN
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = d8, ÊâáÂå∫Êì¶Èô§
#     WriteReg 0x68 0xd8
#     # Write Address
#     WriteReg 0x68 $Sector_Num
#     WriteReg 0x68 0x00
#     WriteReg 0x68 0x00
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
#     return "Sector Erase Done!"
# }
# proc BE {} {
#     WREN
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = c7, Êï¥ÁâáÊì¶Èô§
#     WriteReg 0x68 0xc7
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
#     return "Bulk Erase Done!"
# }
# proc PP {address} {
#     WREN
# # ÂÖàÂÜôÂâ? 128 Byte, Âõ†‰∏∫FIFOÊ∑±Â∫¶256, ‰ΩÜÊòØcmd+Âú∞ÂùÄÂç†Áî®4Byte, ÊâÄ‰ª•ÂÆûÈôÖ‰ΩøÁî®‰∏çË∂?256ByteÂè?Áî°ß
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 02, È°µÂÜô
#     WriteReg 0x68 0x02
#     # Write Address
#     WriteReg 0x68 [expr ($address >> 16)]
#     WriteReg 0x68 [expr ($address % (2**16)) >> 8]
#     WriteReg 0x68 [expr ($address % (2**8))]
#     # Write Data
#     set num 0
#     while {$num < 128} {
#         WriteReg 0x68 $num
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# # ÂÜçÂÜôÂê? 128 Byte
#     # ÊØèÊ?°ÂÜôÊìç‰Ωú‰πãÂâçÈúÄË¶ÅÈáçÊñ∞ÂºÄÂê?ÂÜô‰ΩøËÉ?
#     WREN
#     set address [expr {$address + 128}]
#     puts [ format 0x%08x $address]
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 02, È°µÂÜô
#     WriteReg 0x68 0x02
#     # Write Address
#     WriteReg 0x68 [expr ($address >> 16)]
#     WriteReg 0x68 [expr ($address % (2**16)) >> 8]
#     WriteReg 0x68 [expr ($address % (2**8))]
#     # Write Data
#     while {$num < 256} {
#         WriteReg 0x68 $num
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
#     return "Page Program Done!"
# }
# proc READ {address number} {
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 03, ÊåâÂ≠óËäÇË?ªÊï∞Êç?
#     WriteReg 0x68 0x03
#     # Read Address
#     WriteReg 0x68 [expr ($address >> 16)]
#     WriteReg 0x68 [expr ($address % (2**16)) >> 8]
#     WriteReg 0x68 [expr ($address % (2**8))]
#     # Ë¶ÅË?ªÂ°ËöÂ∞ë‰∏?Êï∞ÊçÆÂ∞±ÂÜôÂá†‰∏™ dummy Êï∞ÊçÆ
#     set num 0
#     while {$num < $number} {
#         WriteReg 0x68 0x00
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# 
#     ######################## ÂÜôÊñá‰ª? ########################
#     set fn "./tcl/rd_data.txt"
#     set fid [open $fn w+]
#     set num 0
#     puts $fid "Number   Address   Data"
#     while {$num < $number + 4} {
#         if {$num >= 4} {
#             puts $fid [format "%-8d %#0-8x   0x%s" [expr {$num-3}] [expr {$address + $num - 3}] [string range [ReadReg 0x6c] end-1 end]]
#         } else {
#             ReadReg 0x6c
#         }
#         incr num 1
#     }
#     close $fid
#     ######################## ËØªÊñá‰ª∂Âà∞ÂèòÈáè line ########################
#     # ÂëΩ‰ª§eof, ‰∏ÄÊó¶Ë?ªÂèñÂà∞Êñá‰ª∂Êú´Â∞?, ËØ•ÂëΩ‰ª§Â∞±ËøîÂõû 1
#     set fid [open $fn r+]
#     while {[eof $fid] != 1} {
#         gets $fid line
#         puts $line
#     }
#     close $fid
#     puts "Read Done!"
#     # set num 0
#     # set read_data "ReadData is "
#     # while {$num < $number + 4} {
#     #     if {$num >= 4} {
#     #         append read_data [string range [ReadReg 0x6c] end-1 end]
#     #     } else {
#     #         ReadReg 0x6c
#     #     }
#     #     incr num 1
#     # }
#     # return $read_data
# }
RDID 4
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x0000000a
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00003fff
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x80000000
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x000001e6
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000186
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x0000009f
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000000
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000000
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000000
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000000
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000000
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000086
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000001
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000186
INFO: [Labtoolstcl 44-481] READ DATA is: 000000ff
INFO: [Labtoolstcl 44-481] READ DATA is: 000000ff
INFO: [Labtoolstcl 44-481] READ DATA is: 000000ff
INFO: [Labtoolstcl 44-481] READ DATA is: 000000ff
INFO: [Labtoolstcl 44-481] READ DATA is: 000000ff
RDID is ffffffff
RDID 10
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x0000000a
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00003fff
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x80000000
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x000001e6
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000186
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x0000009f
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000000
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000000
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000000
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000000
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000000
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000000
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000000
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000000
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000000
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000000
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000000
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000086
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000001
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000186
INFO: [Labtoolstcl 44-481] READ DATA is: 000000ff
INFO: [Labtoolstcl 44-481] READ DATA is: 00000020
INFO: [Labtoolstcl 44-481] READ DATA is: 000000ba
INFO: [Labtoolstcl 44-481] READ DATA is: 00000018
INFO: [Labtoolstcl 44-481] READ DATA is: 00000010
INFO: [Labtoolstcl 44-481] READ DATA is: 00000000
INFO: [Labtoolstcl 44-481] READ DATA is: 00000000
INFO: [Labtoolstcl 44-481] READ DATA is: 00000023
INFO: [Labtoolstcl 44-481] READ DATA is: 00000073
INFO: [Labtoolstcl 44-481] READ DATA is: 00000074
INFO: [Labtoolstcl 44-481] READ DATA is: 00000062
RDID is 20ba1810000023737462
RDID 10
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x0000000a
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00003fff
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x80000000
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x000001e6
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000186
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x0000009f
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000000
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000000
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000000
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000000
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000000
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000000
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000000
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000000
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000000
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000000
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000000
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000086
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000001
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000186
INFO: [Labtoolstcl 44-481] READ DATA is: 000000ff
INFO: [Labtoolstcl 44-481] READ DATA is: 00000020
INFO: [Labtoolstcl 44-481] READ DATA is: 000000ba
INFO: [Labtoolstcl 44-481] READ DATA is: 00000018
INFO: [Labtoolstcl 44-481] READ DATA is: 00000010
INFO: [Labtoolstcl 44-481] READ DATA is: 00000000
INFO: [Labtoolstcl 44-481] READ DATA is: 00000000
INFO: [Labtoolstcl 44-481] READ DATA is: 00000023
INFO: [Labtoolstcl 44-481] READ DATA is: 00000073
INFO: [Labtoolstcl 44-481] READ DATA is: 00000074
INFO: [Labtoolstcl 44-481] READ DATA is: 00000062
RDID is 20ba1810000023737462
set_property PROBES.FILE {C:/Users/hjh09/Desktop/project/spi_test/prj/top.runs/impl_1/top.ltx} [get_hw_devices xc7a35t_0]
set_property FULL_PROBES.FILE {C:/Users/hjh09/Desktop/project/spi_test/prj/top.runs/impl_1/top.ltx} [get_hw_devices xc7a35t_0]
set_property PROGRAM.FILE {C:/Users/hjh09/Desktop/project/spi_test/prj/top.runs/impl_1/top.bit} [get_hw_devices xc7a35t_0]
program_hw_devices [get_hw_devices xc7a35t_0]
INFO: [Labtools 27-3164] End of startup status: HIGH
refresh_hw_device [lindex [get_hw_devices xc7a35t_0] 0]
INFO: [Labtools 27-2302] Device xc7a35t (JTAG device index = 0) is programmed with a design that has 1 JTAG AXI core(s).
RDID 10
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x0000000a
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00003fff
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x80000000
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x000001e6
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000186
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x0000009f
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000000
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000000
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000000
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000000
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000000
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000000
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000000
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000000
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000000
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000000
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000000
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000086
INFO: [Labtoolstcl 44-481] WRITE DATA is: 0x00000001
INFO: [Common 17-14] Message 'Labtoolstcl 44-481' appears 100 times and further instances of the messages will be disabled. Use the Tcl command set_msg_config to change the current settings.
RDID is ffffffffffffffffffff
RDID 10
RDID is 20ba1810000023737462
set_property PROBES.FILE {C:/Users/hjh09/Desktop/project/spi_test/prj/top.runs/impl_1/top.ltx} [get_hw_devices xc7a35t_0]
set_property FULL_PROBES.FILE {C:/Users/hjh09/Desktop/project/spi_test/prj/top.runs/impl_1/top.ltx} [get_hw_devices xc7a35t_0]
set_property PROGRAM.FILE {C:/Users/hjh09/Desktop/project/spi_test/prj/top.runs/impl_1/top.bit} [get_hw_devices xc7a35t_0]
program_hw_devices [get_hw_devices xc7a35t_0]
INFO: [Labtools 27-3164] End of startup status: HIGH
refresh_hw_device [lindex [get_hw_devices xc7a35t_0] 0]
INFO: [Labtools 27-2302] Device xc7a35t (JTAG device index = 0) is programmed with a design that has 1 JTAG AXI core(s).
BE
Bulk Erase Done!
RDID 10
RDID is 20ba1810000023737462
READ 0X100 200
couldn't open "./tcl/rd_data.txt": no such file or directory
source C:/Users/hjh09/Desktop/project/spi_test/tcl/flash_test.tcl
# proc ReadReg {address} {
#     set address [format 0x%08x $address]
#     create_hw_axi_txn rd_txn [get_hw_axis hw_axi_1] -address $address -type read
#     run_hw_axi rd_txn
#     set read_value [lindex [report_hw_axi_txn rd_txn] 1]
#     delete_hw_axi_txn rd_txn
#     return $read_value
# }
# proc WriteReg {address data} {
#     set address [format 0x%08x $address]
#     set data [format 0x%08x $data]
#     create_hw_axi_txn wr_txn [get_hw_axis hw_axi_1] -type write -address $address -data $data
#     run_hw_axi wr_txn
#     set write_value [lindex [report_hw_axi_txn wr_txn] 1]
#     delete_hw_axi_txn wr_txn
#     return $write_value
# }
# proc RDID {byte_num} {
#     WriteReg 0x40 0xa
#     WriteReg 0x28 0x3fff
#     WriteReg 0x1c 0x80000000
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 9F, ËØ? FLASH ID
#     WriteReg 0x68 0x9f
#     # Ë¶ÅË?ªÂ°ËöÂ∞ë‰∏?Êï∞ÊçÆÂ∞±ÂÜôÂá†‰∏™ dummy Êï∞ÊçÆ
#     set num 0
#     while {$num < $byte_num} {
#         WriteReg 0x68 0x00
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# 
#     set num 0
#     set id_data "RDID is "
#     while {$num < $byte_num + 1} {
#         if {$num >= 1} {
#             append id_data [string range [ReadReg 0x6c] end-1 end]
#         } else {
#             ReadReg 0x6c
#         }
#         incr num 1
#     }
#     return $id_data
# }
# proc WREN {} {
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 06, ÂÜô‰ΩøËÉ?
#     WriteReg 0x68 0x06
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
#     return "Write Enable!"
# }
# proc SE {Sector_Num} {
#     WREN
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = d8, ÊâáÂå∫Êì¶Èô§
#     WriteReg 0x68 0xd8
#     # Write Address
#     WriteReg 0x68 $Sector_Num
#     WriteReg 0x68 0x00
#     WriteReg 0x68 0x00
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
#     return "Sector Erase Done!"
# }
# proc BE {} {
#     WREN
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = c7, Êï¥ÁâáÊì¶Èô§
#     WriteReg 0x68 0xc7
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
#     return "Bulk Erase Done!"
# }
# proc PP {address} {
#     WREN
# # ÂÖàÂÜôÂâ? 128 Byte, Âõ†‰∏∫FIFOÊ∑±Â∫¶256, ‰ΩÜÊòØcmd+Âú∞ÂùÄÂç†Áî®4Byte, ÊâÄ‰ª•ÂÆûÈôÖ‰ΩøÁî®‰∏çË∂?256ByteÂè?Áî°ß
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 02, È°µÂÜô
#     WriteReg 0x68 0x02
#     # Write Address
#     WriteReg 0x68 [expr ($address >> 16)]
#     WriteReg 0x68 [expr ($address % (2**16)) >> 8]
#     WriteReg 0x68 [expr ($address % (2**8))]
#     # Write Data
#     set num 0
#     while {$num < 128} {
#         WriteReg 0x68 $num
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# # ÂÜçÂÜôÂê? 128 Byte
#     # ÊØèÊ?°ÂÜôÊìç‰Ωú‰πãÂâçÈúÄË¶ÅÈáçÊñ∞ÂºÄÂê?ÂÜô‰ΩøËÉ?
#     WREN
#     set address [expr {$address + 128}]
#     puts [ format 0x%08x $address]
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 02, È°µÂÜô
#     WriteReg 0x68 0x02
#     # Write Address
#     WriteReg 0x68 [expr ($address >> 16)]
#     WriteReg 0x68 [expr ($address % (2**16)) >> 8]
#     WriteReg 0x68 [expr ($address % (2**8))]
#     # Write Data
#     while {$num < 256} {
#         WriteReg 0x68 $num
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
#     return "Page Program Done!"
# }
# proc READ {address number} {
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 03, ÊåâÂ≠óËäÇË?ªÊï∞Êç?
#     WriteReg 0x68 0x03
#     # Read Address
#     WriteReg 0x68 [expr ($address >> 16)]
#     WriteReg 0x68 [expr ($address % (2**16)) >> 8]
#     WriteReg 0x68 [expr ($address % (2**8))]
#     # Ë¶ÅË?ªÂ°ËöÂ∞ë‰∏?Êï∞ÊçÆÂ∞±ÂÜôÂá†‰∏™ dummy Êï∞ÊçÆ
#     set num 0
#     while {$num < $number} {
#         WriteReg 0x68 0x00
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# 
#     ######################## ÂÜôÊñá‰ª? ########################
#     set fn "./rd_data.txt"
#     set fid [open $fn w+]
#     set num 0
#     puts $fid "Number   Address   Data"
#     while {$num < $number + 4} {
#         if {$num >= 4} {
#             puts $fid [format "%-8d %#0-8x   0x%s" [expr {$num-3}] [expr {$address + $num - 3}] [string range [ReadReg 0x6c] end-1 end]]
#         } else {
#             ReadReg 0x6c
#         }
#         incr num 1
#     }
#     close $fid
#     ######################## ËØªÊñá‰ª∂Âà∞ÂèòÈáè line ########################
#     # ÂëΩ‰ª§eof, ‰∏ÄÊó¶Ë?ªÂèñÂà∞Êñá‰ª∂Êú´Â∞?, ËØ•ÂëΩ‰ª§Â∞±ËøîÂõû 1
#     set fid [open $fn r+]
#     while {[eof $fid] != 1} {
#         gets $fid line
#         puts $line
#     }
#     close $fid
#     puts "Read Done!"
#     # set num 0
#     # set read_data "ReadData is "
#     # while {$num < $number + 4} {
#     #     if {$num >= 4} {
#     #         append read_data [string range [ReadReg 0x6c] end-1 end]
#     #     } else {
#     #         ReadReg 0x6c
#     #     }
#     #     incr num 1
#     # }
#     # return $read_data
# }
READ 0X100 200
Number   Address   Data
1        0x000101   0x00
2        0x000102   0x01
3        0x000103   0x02
4        0x000104   0x03
5        0x000105   0x04
6        0x000106   0x05
7        0x000107   0x06
8        0x000108   0x07
9        0x000109   0x08
10       0x00010a   0x09
11       0x00010b   0x0a
12       0x00010c   0x0b
13       0x00010d   0x0c
14       0x00010e   0x0d
15       0x00010f   0x0e
16       0x000110   0x0f
17       0x000111   0x10
18       0x000112   0x11
19       0x000113   0x12
20       0x000114   0x13
21       0x000115   0x14
22       0x000116   0x15
23       0x000117   0x16
24       0x000118   0x17
25       0x000119   0x18
26       0x00011a   0x19
27       0x00011b   0x1a
28       0x00011c   0x1b
29       0x00011d   0x1c
30       0x00011e   0x1d
31       0x00011f   0x1e
32       0x000120   0x1f
33       0x000121   0x20
34       0x000122   0x21
35       0x000123   0x22
36       0x000124   0x23
37       0x000125   0x24
38       0x000126   0x25
39       0x000127   0x26
40       0x000128   0x27
41       0x000129   0x28
42       0x00012a   0x29
43       0x00012b   0x2a
44       0x00012c   0x2b
45       0x00012d   0x2c
46       0x00012e   0x2d
47       0x00012f   0x2e
48       0x000130   0x2f
49       0x000131   0x30
50       0x000132   0x31
51       0x000133   0x32
52       0x000134   0x33
53       0x000135   0x34
54       0x000136   0x35
55       0x000137   0x36
56       0x000138   0x37
57       0x000139   0x38
58       0x00013a   0x39
59       0x00013b   0x3a
60       0x00013c   0x3b
61       0x00013d   0x3c
62       0x00013e   0x3d
63       0x00013f   0x3e
64       0x000140   0x3f
65       0x000141   0x40
66       0x000142   0x41
67       0x000143   0x42
68       0x000144   0x43
69       0x000145   0x44
70       0x000146   0x45
71       0x000147   0x46
72       0x000148   0x47
73       0x000149   0x48
74       0x00014a   0x49
75       0x00014b   0x4a
76       0x00014c   0x4b
77       0x00014d   0x4c
78       0x00014e   0x4d
79       0x00014f   0x4e
80       0x000150   0x4f
81       0x000151   0x50
82       0x000152   0x51
83       0x000153   0x52
84       0x000154   0x53
85       0x000155   0x54
86       0x000156   0x55
87       0x000157   0x56
88       0x000158   0x57
89       0x000159   0x58
90       0x00015a   0x59
91       0x00015b   0x5a
92       0x00015c   0x5b
93       0x00015d   0x5c
94       0x00015e   0x5d
95       0x00015f   0x5e
96       0x000160   0x5f
97       0x000161   0x60
98       0x000162   0x61
99       0x000163   0x62
100      0x000164   0x63
101      0x000165   0x64
102      0x000166   0x65
103      0x000167   0x66
104      0x000168   0x67
105      0x000169   0x68
106      0x00016a   0x69
107      0x00016b   0x6a
108      0x00016c   0x6b
109      0x00016d   0x6c
110      0x00016e   0x6d
111      0x00016f   0x6e
112      0x000170   0x6f
113      0x000171   0x70
114      0x000172   0x71
115      0x000173   0x72
116      0x000174   0x73
117      0x000175   0x74
118      0x000176   0x75
119      0x000177   0x76
120      0x000178   0x77
121      0x000179   0x78
122      0x00017a   0x79
123      0x00017b   0x7a
124      0x00017c   0x7b
125      0x00017d   0x7c
126      0x00017e   0x7d
127      0x00017f   0x7e
128      0x000180   0x7f
129      0x000181   0x80
130      0x000182   0x81
131      0x000183   0x82
132      0x000184   0x83
133      0x000185   0x84
134      0x000186   0x85
135      0x000187   0x86
136      0x000188   0x87
137      0x000189   0x88
138      0x00018a   0x89
139      0x00018b   0x8a
140      0x00018c   0x8b
141      0x00018d   0x8c
142      0x00018e   0x8d
143      0x00018f   0x8e
144      0x000190   0x8f
145      0x000191   0x90
146      0x000192   0x91
147      0x000193   0x92
148      0x000194   0x93
149      0x000195   0x94
150      0x000196   0x95
151      0x000197   0x96
152      0x000198   0x97
153      0x000199   0x98
154      0x00019a   0x99
155      0x00019b   0x9a
156      0x00019c   0x9b
157      0x00019d   0x9c
158      0x00019e   0x9d
159      0x00019f   0x9e
160      0x0001a0   0x9f
161      0x0001a1   0xa0
162      0x0001a2   0xa1
163      0x0001a3   0xa2
164      0x0001a4   0xa3
165      0x0001a5   0xa4
166      0x0001a6   0xa5
167      0x0001a7   0xa6
168      0x0001a8   0xa7
169      0x0001a9   0xa8
170      0x0001aa   0xa9
171      0x0001ab   0xaa
172      0x0001ac   0xab
173      0x0001ad   0xac
174      0x0001ae   0xad
175      0x0001af   0xae
176      0x0001b0   0xaf
177      0x0001b1   0xb0
178      0x0001b2   0xb1
179      0x0001b3   0xb2
180      0x0001b4   0xb3
181      0x0001b5   0xb4
182      0x0001b6   0xb5
183      0x0001b7   0xb6
184      0x0001b8   0xb7
185      0x0001b9   0xb8
186      0x0001ba   0xb9
187      0x0001bb   0xba
188      0x0001bc   0xbb
189      0x0001bd   0xbc
190      0x0001be   0xbd
191      0x0001bf   0xbe
192      0x0001c0   0xbf
193      0x0001c1   0xc0
194      0x0001c2   0xc1
195      0x0001c3   0xc2
196      0x0001c4   0xc3
197      0x0001c5   0xc4
198      0x0001c6   0xc5
199      0x0001c7   0xc6
200      0x0001c8   0xc7

Read Done!
ERROR: [Labtoolstcl 44-513] HW Target shutdown. Closing target: localhost:3121/xilinx_tcf/Digilent/210512180081
INFO: [Labtoolstcl 44-466] Opening hw_target localhost:3121/xilinx_tcf/Digilent/210512180081
INFO: [Labtools 27-1435] Device xc7a35t (JTAG device index = 0) is not programmed (DONE status = 0).
WARNING: [Labtoolstcl 44-129] No matching hw_ila_data was found.
set_property PROBES.FILE {C:/Users/hjh09/Desktop/project/spi_test/prj/top.runs/impl_1/top.ltx} [get_hw_devices xc7a35t_0]
set_property FULL_PROBES.FILE {C:/Users/hjh09/Desktop/project/spi_test/prj/top.runs/impl_1/top.ltx} [get_hw_devices xc7a35t_0]
set_property PROGRAM.FILE {C:/Users/hjh09/Desktop/project/spi_test/prj/top.runs/impl_1/top.bit} [get_hw_devices xc7a35t_0]
program_hw_devices [get_hw_devices xc7a35t_0]
INFO: [Labtools 27-3164] End of startup status: HIGH
refresh_hw_device [lindex [get_hw_devices xc7a35t_0] 0]
INFO: [Labtools 27-2302] Device xc7a35t (JTAG device index = 0) is programmed with a design that has 1 JTAG AXI core(s).
READ 0X100 200
Number   Address   Data
1        0x000101   0xff
2        0x000102   0xff
3        0x000103   0xff
4        0x000104   0xff
5        0x000105   0xff
6        0x000106   0xff
7        0x000107   0xff
8        0x000108   0xff
9        0x000109   0xff
10       0x00010a   0xff
11       0x00010b   0xff
12       0x00010c   0xff
13       0x00010d   0xff
14       0x00010e   0xff
15       0x00010f   0xff
16       0x000110   0xff
17       0x000111   0xff
18       0x000112   0xff
19       0x000113   0xff
20       0x000114   0xff
21       0x000115   0xff
22       0x000116   0xff
23       0x000117   0xff
24       0x000118   0xff
25       0x000119   0xff
26       0x00011a   0xff
27       0x00011b   0xff
28       0x00011c   0xff
29       0x00011d   0xff
30       0x00011e   0xff
31       0x00011f   0xff
32       0x000120   0xff
33       0x000121   0xff
34       0x000122   0xff
35       0x000123   0xff
36       0x000124   0xff
37       0x000125   0xff
38       0x000126   0xff
39       0x000127   0xff
40       0x000128   0xff
41       0x000129   0xff
42       0x00012a   0xff
43       0x00012b   0xff
44       0x00012c   0xff
45       0x00012d   0xff
46       0x00012e   0xff
47       0x00012f   0xff
48       0x000130   0xff
49       0x000131   0xff
50       0x000132   0xff
51       0x000133   0xff
52       0x000134   0xff
53       0x000135   0xff
54       0x000136   0xff
55       0x000137   0xff
56       0x000138   0xff
57       0x000139   0xff
58       0x00013a   0xff
59       0x00013b   0xff
60       0x00013c   0xff
61       0x00013d   0xff
62       0x00013e   0xff
63       0x00013f   0xff
64       0x000140   0xff
65       0x000141   0xff
66       0x000142   0xff
67       0x000143   0xff
68       0x000144   0xff
69       0x000145   0xff
70       0x000146   0xff
71       0x000147   0xff
72       0x000148   0xff
73       0x000149   0xff
74       0x00014a   0xff
75       0x00014b   0xff
76       0x00014c   0xff
77       0x00014d   0xff
78       0x00014e   0xff
79       0x00014f   0xff
80       0x000150   0xff
81       0x000151   0xff
82       0x000152   0xff
83       0x000153   0xff
84       0x000154   0xff
85       0x000155   0xff
86       0x000156   0xff
87       0x000157   0xff
88       0x000158   0xff
89       0x000159   0xff
90       0x00015a   0xff
91       0x00015b   0xff
92       0x00015c   0xff
93       0x00015d   0xff
94       0x00015e   0xff
95       0x00015f   0xff
96       0x000160   0xff
97       0x000161   0xff
98       0x000162   0xff
99       0x000163   0xff
100      0x000164   0xff
101      0x000165   0xff
102      0x000166   0xff
103      0x000167   0xff
104      0x000168   0xff
105      0x000169   0xff
106      0x00016a   0xff
107      0x00016b   0xff
108      0x00016c   0xff
109      0x00016d   0xff
110      0x00016e   0xff
111      0x00016f   0xff
112      0x000170   0xff
113      0x000171   0xff
114      0x000172   0xff
115      0x000173   0xff
116      0x000174   0xff
117      0x000175   0xff
118      0x000176   0xff
119      0x000177   0xff
120      0x000178   0xff
121      0x000179   0xff
122      0x00017a   0xff
123      0x00017b   0xff
124      0x00017c   0xff
125      0x00017d   0xff
126      0x00017e   0xff
127      0x00017f   0xff
128      0x000180   0xff
129      0x000181   0xff
130      0x000182   0xff
131      0x000183   0xff
132      0x000184   0xff
133      0x000185   0xff
134      0x000186   0xff
135      0x000187   0xff
136      0x000188   0xff
137      0x000189   0xff
138      0x00018a   0xff
139      0x00018b   0xff
140      0x00018c   0xff
141      0x00018d   0xff
142      0x00018e   0xff
143      0x00018f   0xff
144      0x000190   0xff
145      0x000191   0xff
146      0x000192   0xff
147      0x000193   0xff
148      0x000194   0xff
149      0x000195   0xff
150      0x000196   0xff
151      0x000197   0xff
152      0x000198   0xff
153      0x000199   0xff
154      0x00019a   0xff
155      0x00019b   0xff
156      0x00019c   0xff
157      0x00019d   0xff
158      0x00019e   0xff
159      0x00019f   0xff
160      0x0001a0   0xff
161      0x0001a1   0xff
162      0x0001a2   0xff
163      0x0001a3   0xff
164      0x0001a4   0xff
165      0x0001a5   0xff
166      0x0001a6   0xff
167      0x0001a7   0xff
168      0x0001a8   0xff
169      0x0001a9   0xff
170      0x0001aa   0xff
171      0x0001ab   0xff
172      0x0001ac   0xff
173      0x0001ad   0xff
174      0x0001ae   0xff
175      0x0001af   0xff
176      0x0001b0   0xff
177      0x0001b1   0xff
178      0x0001b2   0xff
179      0x0001b3   0xff
180      0x0001b4   0xff
181      0x0001b5   0xff
182      0x0001b6   0xff
183      0x0001b7   0xff
184      0x0001b8   0xff
185      0x0001b9   0xff
186      0x0001ba   0xff
187      0x0001bb   0xff
188      0x0001bc   0xff
189      0x0001bd   0xff
190      0x0001be   0xff
191      0x0001bf   0xff
192      0x0001c0   0xff
193      0x0001c1   0xff
194      0x0001c2   0xff
195      0x0001c3   0xff
196      0x0001c4   0xff
197      0x0001c5   0xff
198      0x0001c6   0xff
199      0x0001c7   0xff
200      0x0001c8   0xff

Read Done!
RDID 10
RDID is 20ba1810000023737462
PP 0X100
0x00000180
Page Program Done!
READ 0X100 200
Number   Address   Data
1        0x000101   0x00
2        0x000102   0x01
3        0x000103   0x02
4        0x000104   0x03
5        0x000105   0x04
6        0x000106   0x05
7        0x000107   0x06
8        0x000108   0x07
9        0x000109   0x08
10       0x00010a   0x09
11       0x00010b   0x0a
12       0x00010c   0x0b
13       0x00010d   0x0c
14       0x00010e   0x0d
15       0x00010f   0x0e
16       0x000110   0x0f
17       0x000111   0x10
18       0x000112   0x11
19       0x000113   0x12
20       0x000114   0x13
21       0x000115   0x14
22       0x000116   0x15
23       0x000117   0x16
24       0x000118   0x17
25       0x000119   0x18
26       0x00011a   0x19
27       0x00011b   0x1a
28       0x00011c   0x1b
29       0x00011d   0x1c
30       0x00011e   0x1d
31       0x00011f   0x1e
32       0x000120   0x1f
33       0x000121   0x20
34       0x000122   0x21
35       0x000123   0x22
36       0x000124   0x23
37       0x000125   0x24
38       0x000126   0x25
39       0x000127   0x26
40       0x000128   0x27
41       0x000129   0x28
42       0x00012a   0x29
43       0x00012b   0x2a
44       0x00012c   0x2b
45       0x00012d   0x2c
46       0x00012e   0x2d
47       0x00012f   0x2e
48       0x000130   0x2f
49       0x000131   0x30
50       0x000132   0x31
51       0x000133   0x32
52       0x000134   0x33
53       0x000135   0x34
54       0x000136   0x35
55       0x000137   0x36
56       0x000138   0x37
57       0x000139   0x38
58       0x00013a   0x39
59       0x00013b   0x3a
60       0x00013c   0x3b
61       0x00013d   0x3c
62       0x00013e   0x3d
63       0x00013f   0x3e
64       0x000140   0x3f
65       0x000141   0x40
66       0x000142   0x41
67       0x000143   0x42
68       0x000144   0x43
69       0x000145   0x44
70       0x000146   0x45
71       0x000147   0x46
72       0x000148   0x47
73       0x000149   0x48
74       0x00014a   0x49
75       0x00014b   0x4a
76       0x00014c   0x4b
77       0x00014d   0x4c
78       0x00014e   0x4d
79       0x00014f   0x4e
80       0x000150   0x4f
81       0x000151   0x50
82       0x000152   0x51
83       0x000153   0x52
84       0x000154   0x53
85       0x000155   0x54
86       0x000156   0x55
87       0x000157   0x56
88       0x000158   0x57
89       0x000159   0x58
90       0x00015a   0x59
91       0x00015b   0x5a
92       0x00015c   0x5b
93       0x00015d   0x5c
94       0x00015e   0x5d
95       0x00015f   0x5e
96       0x000160   0x5f
97       0x000161   0x60
98       0x000162   0x61
99       0x000163   0x62
100      0x000164   0x63
101      0x000165   0x64
102      0x000166   0x65
103      0x000167   0x66
104      0x000168   0x67
105      0x000169   0x68
106      0x00016a   0x69
107      0x00016b   0x6a
108      0x00016c   0x6b
109      0x00016d   0x6c
110      0x00016e   0x6d
111      0x00016f   0x6e
112      0x000170   0x6f
113      0x000171   0x70
114      0x000172   0x71
115      0x000173   0x72
116      0x000174   0x73
117      0x000175   0x74
118      0x000176   0x75
119      0x000177   0x76
120      0x000178   0x77
121      0x000179   0x78
122      0x00017a   0x79
123      0x00017b   0x7a
124      0x00017c   0x7b
125      0x00017d   0x7c
126      0x00017e   0x7d
127      0x00017f   0x7e
128      0x000180   0x7f
129      0x000181   0x80
130      0x000182   0x81
131      0x000183   0x82
132      0x000184   0x83
133      0x000185   0x84
134      0x000186   0x85
135      0x000187   0x86
136      0x000188   0x87
137      0x000189   0x88
138      0x00018a   0x89
139      0x00018b   0x8a
140      0x00018c   0x8b
141      0x00018d   0x8c
142      0x00018e   0x8d
143      0x00018f   0x8e
144      0x000190   0x8f
145      0x000191   0x90
146      0x000192   0x91
147      0x000193   0x92
148      0x000194   0x93
149      0x000195   0x94
150      0x000196   0x95
151      0x000197   0x96
152      0x000198   0x97
153      0x000199   0x98
154      0x00019a   0x99
155      0x00019b   0x9a
156      0x00019c   0x9b
157      0x00019d   0x9c
158      0x00019e   0x9d
159      0x00019f   0x9e
160      0x0001a0   0x9f
161      0x0001a1   0xa0
162      0x0001a2   0xa1
163      0x0001a3   0xa2
164      0x0001a4   0xa3
165      0x0001a5   0xa4
166      0x0001a6   0xa5
167      0x0001a7   0xa6
168      0x0001a8   0xa7
169      0x0001a9   0xa8
170      0x0001aa   0xa9
171      0x0001ab   0xaa
172      0x0001ac   0xab
173      0x0001ad   0xac
174      0x0001ae   0xad
175      0x0001af   0xae
176      0x0001b0   0xaf
177      0x0001b1   0xb0
178      0x0001b2   0xb1
179      0x0001b3   0xb2
180      0x0001b4   0xb3
181      0x0001b5   0xb4
182      0x0001b6   0xb5
183      0x0001b7   0xb6
184      0x0001b8   0xb7
185      0x0001b9   0xb8
186      0x0001ba   0xb9
187      0x0001bb   0xba
188      0x0001bc   0xbb
189      0x0001bd   0xbc
190      0x0001be   0xbd
191      0x0001bf   0xbe
192      0x0001c0   0xbf
193      0x0001c1   0xc0
194      0x0001c2   0xc1
195      0x0001c3   0xc2
196      0x0001c4   0xc3
197      0x0001c5   0xc4
198      0x0001c6   0xc5
199      0x0001c7   0xc6
200      0x0001c8   0xc7

Read Done!
source C:/Users/hjh09/Desktop/project/spi_test/tcl/flash_test.tcl
# proc ReadReg {address} {
#     set address [format 0x%08x $address]
#     create_hw_axi_txn rd_txn [get_hw_axis hw_axi_1] -address $address -type read
#     run_hw_axi rd_txn
#     set read_value [lindex [report_hw_axi_txn rd_txn] 1]
#     delete_hw_axi_txn rd_txn
#     return $read_value
# }
# proc WriteReg {address data} {
#     set address [format 0x%08x $address]
#     set data [format 0x%08x $data]
#     create_hw_axi_txn wr_txn [get_hw_axis hw_axi_1] -type write -address $address -data $data
#     run_hw_axi wr_txn
#     set write_value [lindex [report_hw_axi_txn wr_txn] 1]
#     delete_hw_axi_txn wr_txn
#     return $write_value
# }
# proc RDID {byte_num} {
#     WriteReg 0x40 0xa
#     WriteReg 0x28 0x3fff
#     WriteReg 0x1c 0x80000000
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 6B, ËØ? Quad Output Fast Read
#     WriteReg 0x68 0x6B
#     # Ë¶ÅË?ªÂ°ËöÂ∞ë‰∏?Êï∞ÊçÆÂ∞±ÂÜôÂá†‰∏™ dummy Êï∞ÊçÆ
#     set num 0
#     while {$num < $byte_num} {
#         WriteReg 0x68 0x00
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# 
#     set num 0
#     set id_data "RDID is "
#     while {$num < $byte_num + 1} {
#         if {$num >= 1} {
#             append id_data [string range [ReadReg 0x6c] end-1 end]
#         } else {
#             ReadReg 0x6c
#         }
#         incr num 1
#     }
#     return $id_data
# }
# proc RDID {byte_num} {
#     WriteReg 0x40 0xa
#     WriteReg 0x28 0x3fff
#     WriteReg 0x1c 0x80000000
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 9F, ËØ? FLASH ID
#     WriteReg 0x68 0x9f
#     # Ë¶ÅË?ªÂ°ËöÂ∞ë‰∏?Êï∞ÊçÆÂ∞±ÂÜôÂá†‰∏™ dummy Êï∞ÊçÆ
#     set num 0
#     while {$num < $byte_num} {
#         WriteReg 0x68 0x00
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# 
#     set num 0
#     set id_data "RDID is "
#     while {$num < $byte_num + 1} {
#         if {$num >= 1} {
#             append id_data [string range [ReadReg 0x6c] end-1 end]
#         } else {
#             ReadReg 0x6c
#         }
#         incr num 1
#     }
#     return $id_data
# }
# proc WREN {} {
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 06, ÂÜô‰ΩøËÉ?
#     WriteReg 0x68 0x06
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
#     return "Write Enable!"
# }
# proc SE {Sector_Num} {
#     WREN
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = d8, ÊâáÂå∫Êì¶Èô§
#     WriteReg 0x68 0xd8
#     # Write Address
#     WriteReg 0x68 $Sector_Num
#     WriteReg 0x68 0x00
#     WriteReg 0x68 0x00
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
#     return "Sector Erase Done!"
# }
# proc BE {} {
#     WREN
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = c7, Êï¥ÁâáÊì¶Èô§
#     WriteReg 0x68 0xc7
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
#     return "Bulk Erase Done!"
# }
# proc PP {address} {
#     WREN
# # ÂÖàÂÜôÂâ? 128 Byte, Âõ†‰∏∫FIFOÊ∑±Â∫¶256, ‰ΩÜÊòØcmd+Âú∞ÂùÄÂç†Áî®4Byte, ÊâÄ‰ª•ÂÆûÈôÖ‰ΩøÁî®‰∏çË∂?256ByteÂè?Áî°ß
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 02, È°µÂÜô
#     WriteReg 0x68 0x02
#     # Write Address
#     WriteReg 0x68 [expr ($address >> 16)]
#     WriteReg 0x68 [expr ($address % (2**16)) >> 8]
#     WriteReg 0x68 [expr ($address % (2**8))]
#     # Write Data
#     set num 0
#     while {$num < 128} {
#         WriteReg 0x68 $num
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# # ÂÜçÂÜôÂê? 128 Byte
#     # ÊØèÊ?°ÂÜôÊìç‰Ωú‰πãÂâçÈúÄË¶ÅÈáçÊñ∞ÂºÄÂê?ÂÜô‰ΩøËÉ?
#     WREN
#     set address [expr {$address + 128}]
#     puts [ format 0x%08x $address]
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 02, È°µÂÜô
#     WriteReg 0x68 0x02
#     # Write Address
#     WriteReg 0x68 [expr ($address >> 16)]
#     WriteReg 0x68 [expr ($address % (2**16)) >> 8]
#     WriteReg 0x68 [expr ($address % (2**8))]
#     # Write Data
#     while {$num < 256} {
#         WriteReg 0x68 $num
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
#     return "Page Program Done!"
# }
# proc READ {address number} {
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 03, ÊåâÂ≠óËäÇË?ªÊï∞Êç?
#     WriteReg 0x68 0x03
#     # Read Address
#     WriteReg 0x68 [expr ($address >> 16)]
#     WriteReg 0x68 [expr ($address % (2**16)) >> 8]
#     WriteReg 0x68 [expr ($address % (2**8))]
#     # Ë¶ÅË?ªÂ°ËöÂ∞ë‰∏?Êï∞ÊçÆÂ∞±ÂÜôÂá†‰∏™ dummy Êï∞ÊçÆ
#     set num 0
#     while {$num < $number} {
#         WriteReg 0x68 0x00
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# 
#     ######################## ÂÜôÊñá‰ª? ########################
#     set fn "./rd_data.txt"
#     set fid [open $fn w+]
#     set num 0
#     puts $fid "Number   Address   Data"
#     while {$num < $number + 4} {
#         if {$num >= 4} {
#             puts $fid [format "%-8d %#0-8x   0x%s" [expr {$num-3}] [expr {$address + $num - 3}] [string range [ReadReg 0x6c] end-1 end]]
#         } else {
#             ReadReg 0x6c
#         }
#         incr num 1
#     }
#     close $fid
#     ######################## ËØªÊñá‰ª∂Âà∞ÂèòÈáè line ########################
#     # ÂëΩ‰ª§eof, ‰∏ÄÊó¶Ë?ªÂèñÂà∞Êñá‰ª∂Êú´Â∞?, ËØ•ÂëΩ‰ª§Â∞±ËøîÂõû 1
#     set fid [open $fn r+]
#     while {[eof $fid] != 1} {
#         gets $fid line
#         puts $line
#     }
#     close $fid
#     puts "Read Done!"
#     # set num 0
#     # set read_data "ReadData is "
#     # while {$num < $number + 4} {
#     #     if {$num >= 4} {
#     #         append read_data [string range [ReadReg 0x6c] end-1 end]
#     #     } else {
#     #         ReadReg 0x6c
#     #     }
#     #     incr num 1
#     # }
#     # return $read_data
# }
source C:/Users/hjh09/Desktop/project/spi_test/tcl/flash_test.tcl
# proc ReadReg {address} {
#     set address [format 0x%08x $address]
#     create_hw_axi_txn rd_txn [get_hw_axis hw_axi_1] -address $address -type read
#     run_hw_axi rd_txn
#     set read_value [lindex [report_hw_axi_txn rd_txn] 1]
#     delete_hw_axi_txn rd_txn
#     return $read_value
# }
# proc WriteReg {address data} {
#     set address [format 0x%08x $address]
#     set data [format 0x%08x $data]
#     create_hw_axi_txn wr_txn [get_hw_axis hw_axi_1] -type write -address $address -data $data
#     run_hw_axi wr_txn
#     set write_value [lindex [report_hw_axi_txn wr_txn] 1]
#     delete_hw_axi_txn wr_txn
#     return $write_value
# }
# proc QOFR {byte_num} {
#     WriteReg 0x40 0xa
#     WriteReg 0x28 0x3fff
#     WriteReg 0x1c 0x80000000
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 6B, ËØ? Quad Output Fast Read
#     WriteReg 0x68 0x6B
#     # Ë¶ÅË?ªÂ°ËöÂ∞ë‰∏?Êï∞ÊçÆÂ∞±ÂÜôÂá†‰∏™ dummy Êï∞ÊçÆ
#     set num 0
#     while {$num < $byte_num} {
#         WriteReg 0x68 0x00
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# 
#     set num 0
#     set id_data "RDID is "
#     while {$num < $byte_num + 1} {
#         if {$num >= 1} {
#             append id_data [string range [ReadReg 0x6c] end-1 end]
#         } else {
#             ReadReg 0x6c
#         }
#         incr num 1
#     }
#     return $id_data
# }
# proc RDID {byte_num} {
#     WriteReg 0x40 0xa
#     WriteReg 0x28 0x3fff
#     WriteReg 0x1c 0x80000000
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 9F, ËØ? FLASH ID
#     WriteReg 0x68 0x9f
#     # Ë¶ÅË?ªÂ°ËöÂ∞ë‰∏?Êï∞ÊçÆÂ∞±ÂÜôÂá†‰∏™ dummy Êï∞ÊçÆ
#     set num 0
#     while {$num < $byte_num} {
#         WriteReg 0x68 0x00
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# 
#     set num 0
#     set id_data "RDID is "
#     while {$num < $byte_num + 1} {
#         if {$num >= 1} {
#             append id_data [string range [ReadReg 0x6c] end-1 end]
#         } else {
#             ReadReg 0x6c
#         }
#         incr num 1
#     }
#     return $id_data
# }
# proc WREN {} {
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 06, ÂÜô‰ΩøËÉ?
#     WriteReg 0x68 0x06
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
#     return "Write Enable!"
# }
# proc SE {Sector_Num} {
#     WREN
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = d8, ÊâáÂå∫Êì¶Èô§
#     WriteReg 0x68 0xd8
#     # Write Address
#     WriteReg 0x68 $Sector_Num
#     WriteReg 0x68 0x00
#     WriteReg 0x68 0x00
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
#     return "Sector Erase Done!"
# }
# proc BE {} {
#     WREN
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = c7, Êï¥ÁâáÊì¶Èô§
#     WriteReg 0x68 0xc7
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
#     return "Bulk Erase Done!"
# }
# proc PP {address} {
#     WREN
# # ÂÖàÂÜôÂâ? 128 Byte, Âõ†‰∏∫FIFOÊ∑±Â∫¶256, ‰ΩÜÊòØcmd+Âú∞ÂùÄÂç†Áî®4Byte, ÊâÄ‰ª•ÂÆûÈôÖ‰ΩøÁî®‰∏çË∂?256ByteÂè?Áî°ß
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 02, È°µÂÜô
#     WriteReg 0x68 0x02
#     # Write Address
#     WriteReg 0x68 [expr ($address >> 16)]
#     WriteReg 0x68 [expr ($address % (2**16)) >> 8]
#     WriteReg 0x68 [expr ($address % (2**8))]
#     # Write Data
#     set num 0
#     while {$num < 128} {
#         WriteReg 0x68 $num
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# # ÂÜçÂÜôÂê? 128 Byte
#     # ÊØèÊ?°ÂÜôÊìç‰Ωú‰πãÂâçÈúÄË¶ÅÈáçÊñ∞ÂºÄÂê?ÂÜô‰ΩøËÉ?
#     WREN
#     set address [expr {$address + 128}]
#     puts [ format 0x%08x $address]
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 02, È°µÂÜô
#     WriteReg 0x68 0x02
#     # Write Address
#     WriteReg 0x68 [expr ($address >> 16)]
#     WriteReg 0x68 [expr ($address % (2**16)) >> 8]
#     WriteReg 0x68 [expr ($address % (2**8))]
#     # Write Data
#     while {$num < 256} {
#         WriteReg 0x68 $num
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
#     return "Page Program Done!"
# }
# proc READ {address number} {
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 03, ÊåâÂ≠óËäÇË?ªÊï∞Êç?
#     WriteReg 0x68 0x03
#     # Read Address
#     WriteReg 0x68 [expr ($address >> 16)]
#     WriteReg 0x68 [expr ($address % (2**16)) >> 8]
#     WriteReg 0x68 [expr ($address % (2**8))]
#     # Ë¶ÅË?ªÂ°ËöÂ∞ë‰∏?Êï∞ÊçÆÂ∞±ÂÜôÂá†‰∏™ dummy Êï∞ÊçÆ
#     set num 0
#     while {$num < $number} {
#         WriteReg 0x68 0x00
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# 
#     ######################## ÂÜôÊñá‰ª? ########################
#     set fn "./rd_data.txt"
#     set fid [open $fn w+]
#     set num 0
#     puts $fid "Number   Address   Data"
#     while {$num < $number + 4} {
#         if {$num >= 4} {
#             puts $fid [format "%-8d %#0-8x   0x%s" [expr {$num-3}] [expr {$address + $num - 3}] [string range [ReadReg 0x6c] end-1 end]]
#         } else {
#             ReadReg 0x6c
#         }
#         incr num 1
#     }
#     close $fid
#     ######################## ËØªÊñá‰ª∂Âà∞ÂèòÈáè line ########################
#     # ÂëΩ‰ª§eof, ‰∏ÄÊó¶Ë?ªÂèñÂà∞Êñá‰ª∂Êú´Â∞?, ËØ•ÂëΩ‰ª§Â∞±ËøîÂõû 1
#     set fid [open $fn r+]
#     while {[eof $fid] != 1} {
#         gets $fid line
#         puts $line
#     }
#     close $fid
#     puts "Read Done!"
#     # set num 0
#     # set read_data "ReadData is "
#     # while {$num < $number + 4} {
#     #     if {$num >= 4} {
#     #         append read_data [string range [ReadReg 0x6c] end-1 end]
#     #     } else {
#     #         ReadReg 0x6c
#     #     }
#     #     incr num 1
#     # }
#     # return $read_data
# }
QOFR 10
RDID is 00000000000000000000
WriteReg 0x40 0xa
0000000a
source C:/Users/hjh09/Desktop/project/spi_test/tcl/flash_test.tcl
# proc ReadReg {address} {
#     set address [format 0x%08x $address]
#     create_hw_axi_txn rd_txn [get_hw_axis hw_axi_1] -address $address -type read
#     run_hw_axi rd_txn
#     set read_value [lindex [report_hw_axi_txn rd_txn] 1]
#     delete_hw_axi_txn rd_txn
#     return $read_value
# }
# proc WriteReg {address data} {
#     set address [format 0x%08x $address]
#     set data [format 0x%08x $data]
#     create_hw_axi_txn wr_txn [get_hw_axis hw_axi_1] -type write -address $address -data $data
#     run_hw_axi wr_txn
#     set write_value [lindex [report_hw_axi_txn wr_txn] 1]
#     delete_hw_axi_txn wr_txn
#     return $write_value
# }
# proc QOFR {address number} {
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 6B, ËØ? Quad Output Fast Read
#     WriteReg 0x68 0x6B
#     # Read Address
#     WriteReg 0x68 [expr ($address >> 16)]
#     WriteReg 0x68 [expr ($address % (2**16)) >> 8]
#     WriteReg 0x68 [expr ($address % (2**8))]
#     # Ë¶ÅË?ªÂ°ËöÂ∞ë‰∏?Êï∞ÊçÆÂ∞±ÂÜôÂá†‰∏™ dummy Êï∞ÊçÆ
#     set num 0
#     while {$num < $number} {
#         WriteReg 0x68 0x00
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# 
#     # set num 0
#     # set QOFR_data "QOFR is "
#     # while {$num < $number + 1} {
#     #     if {$num >= 1} {
#     #         append QOFR_data [string range [ReadReg 0x6c] end-1 end]
#     #     } else {
#     #         ReadReg 0x6c
#     #     }
#     #     incr num 1
#     # }
#     # return $QOFR_data
# }
# proc RDID {byte_num} {
#     WriteReg 0x40 0xa
#     WriteReg 0x28 0x3fff
#     WriteReg 0x1c 0x80000000
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 9F, ËØ? FLASH ID
#     WriteReg 0x68 0x9f
#     # Ë¶ÅË?ªÂ°ËöÂ∞ë‰∏?Êï∞ÊçÆÂ∞±ÂÜôÂá†‰∏™ dummy Êï∞ÊçÆ
#     set num 0
#     while {$num < $byte_num} {
#         WriteReg 0x68 0x00
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# 
#     set num 0
#     set id_data "RDID is "
#     while {$num < $byte_num + 1} {
#         if {$num >= 1} {
#             append id_data [string range [ReadReg 0x6c] end-1 end]
#         } else {
#             ReadReg 0x6c
#         }
#         incr num 1
#     }
#     return $id_data
# }
# proc WREN {} {
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 06, ÂÜô‰ΩøËÉ?
#     WriteReg 0x68 0x06
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
#     return "Write Enable!"
# }
# proc SE {Sector_Num} {
#     WREN
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = d8, ÊâáÂå∫Êì¶Èô§
#     WriteReg 0x68 0xd8
#     # Write Address
#     WriteReg 0x68 $Sector_Num
#     WriteReg 0x68 0x00
#     WriteReg 0x68 0x00
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
#     return "Sector Erase Done!"
# }
# proc BE {} {
#     WREN
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = c7, Êï¥ÁâáÊì¶Èô§
#     WriteReg 0x68 0xc7
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
#     return "Bulk Erase Done!"
# }
# proc PP {address} {
#     WREN
# # ÂÖàÂÜôÂâ? 128 Byte, Âõ†‰∏∫FIFOÊ∑±Â∫¶256, ‰ΩÜÊòØcmd+Âú∞ÂùÄÂç†Áî®4Byte, ÊâÄ‰ª•ÂÆûÈôÖ‰ΩøÁî®‰∏çË∂?256ByteÂè?Áî°ß
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 02, È°µÂÜô
#     WriteReg 0x68 0x02
#     # Write Address
#     WriteReg 0x68 [expr ($address >> 16)]
#     WriteReg 0x68 [expr ($address % (2**16)) >> 8]
#     WriteReg 0x68 [expr ($address % (2**8))]
#     # Write Data
#     set num 0
#     while {$num < 128} {
#         WriteReg 0x68 $num
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# # ÂÜçÂÜôÂê? 128 Byte
#     # ÊØèÊ?°ÂÜôÊìç‰Ωú‰πãÂâçÈúÄË¶ÅÈáçÊñ∞ÂºÄÂê?ÂÜô‰ΩøËÉ?
#     WREN
#     set address [expr {$address + 128}]
#     puts [ format 0x%08x $address]
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 02, È°µÂÜô
#     WriteReg 0x68 0x02
#     # Write Address
#     WriteReg 0x68 [expr ($address >> 16)]
#     WriteReg 0x68 [expr ($address % (2**16)) >> 8]
#     WriteReg 0x68 [expr ($address % (2**8))]
#     # Write Data
#     while {$num < 256} {
#         WriteReg 0x68 $num
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
#     return "Page Program Done!"
# }
# proc READ {address number} {
#     # Â§ç‰Ωç tx rx fifo
#     WriteReg 0x60 0x1e6
#     # ÈáäÊîæ fifo Â§ç‰Ωç
#     WriteReg 0x60 0x186
#     # CMD = 03, ÊåâÂ≠óËäÇË?ªÊï∞Êç?
#     WriteReg 0x68 0x03
#     # Read Address
#     WriteReg 0x68 [expr ($address >> 16)]
#     WriteReg 0x68 [expr ($address % (2**16)) >> 8]
#     WriteReg 0x68 [expr ($address % (2**8))]
#     # Ë¶ÅË?ªÂ°ËöÂ∞ë‰∏?Êï∞ÊçÆÂ∞±ÂÜôÂá†‰∏™ dummy Êï∞ÊçÆ
#     set num 0
#     while {$num < $number} {
#         WriteReg 0x68 0x00
#         incr num 1
#     }
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS
#     WriteReg 0x70 0x00
#     # ‰ΩøËÉΩ master, ÂºÄÂßãÂèëÊï∞ÊçÆ
#     WriteReg 0x60 0x86
#     # ÈÄâÊã© 0 ÈÄöÈÅìCS ÊãâÈ´ò
#     WriteReg 0x70 0x1
#     # Á¶ÅÁî® master
#     WriteReg 0x60 0x186
# 
#     ######################## ÂÜôÊñá‰ª? ########################
#     set fn "./rd_data.txt"
#     set fid [open $fn w+]
#     set num 0
#     puts $fid "Number   Address   Data"
#     while {$num < $number + 4} {
#         if {$num >= 4} {
#             puts $fid [format "%-8d %#0-8x   0x%s" [expr {$num-3}] [expr {$address + $num - 3}] [string range [ReadReg 0x6c] end-1 end]]
#         } else {
#             ReadReg 0x6c
#         }
#         incr num 1
#     }
#     close $fid
#     ######################## ËØªÊñá‰ª∂Âà∞ÂèòÈáè line ########################
#     # ÂëΩ‰ª§eof, ‰∏ÄÊó¶Ë?ªÂèñÂà∞Êñá‰ª∂Êú´Â∞?, ËØ•ÂëΩ‰ª§Â∞±ËøîÂõû 1
#     set fid [open $fn r+]
#     while {[eof $fid] != 1} {
#         gets $fid line
#         puts $line
#     }
#     close $fid
#     puts "Read Done!"
#     # set num 0
#     # set read_data "ReadData is "
#     # while {$num < $number + 4} {
#     #     if {$num >= 4} {
#     #         append read_data [string range [ReadReg 0x6c] end-1 end]
#     #     } else {
#     #         ReadReg 0x6c
#     #     }
#     #     incr num 1
#     # }
#     # return $read_data
# }
QOFR 0X100 10
00000186
ReadReg 0x78
00000000
QOFR 0X100 20
00000186
ReadReg 0x78
00000000
ReadReg 0x20
00002440
ERROR: [Labtoolstcl 44-513] HW Target shutdown. Closing target: localhost:3121/xilinx_tcf/Digilent/210512180081
close_hw
